{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x95bEc9Cd4A8C26b08685B3758A0082799b9F548c",
      "txHash": "0x8d02e38e40c19f590e67edc76236beccaa1549d3d21ade78de33bd230f565902",
      "kind": "uups"
    },
    {
      "address": "0xE5A18946c0B1d40cf8BcB486F05415E9D0Ebf34B",
      "txHash": "0xc562d49aa2d2b87d0071e62eb469b0462ad12e1bac632b84b7e1df07314104d5",
      "kind": "uups"
    },
    {
      "address": "0xffb59E9A90E8e9C2f6902bb444c367f513E39033",
      "txHash": "0x3b428a96acb34f22d314d029ff288a1c372a295e0dfae2342b3ec7a4b264d84c",
      "kind": "uups"
    },
    {
      "address": "0x9bE01b76963100ef01611c0978AFD11C26c2285D",
      "txHash": "0xc3359a5d9fc4860ecbb9bf4392de7eb67e1f10796f8f458a4dc3abbc50571bba",
      "kind": "uups"
    },
    {
      "address": "0x1AaB1Fa7e8CF7C635D1B8b86Cad666a24321E304",
      "txHash": "0xdd7e0e05ea7d792582b7ee60f4cbde5b3fb58c6798684fdcca95276e2ffd5d8a",
      "kind": "uups"
    },
    {
      "address": "0x5DEd1B055CBc4870b31991E546588F71AC48bd76",
      "txHash": "0x1148a41074ddd7eed607d8d3b92112957c91c508ebb7ebbaf9d22df1c8d53e60",
      "kind": "uups"
    },
    {
      "address": "0xF44F7E5153BD4d047688882f4fB8BFE65Bee9b8e",
      "txHash": "0x5fc7c210dc49408cd84977957379aef21e4987a55017965c59c8f78c4056e9f3",
      "kind": "uups"
    },
    {
      "address": "0x5Cd2a72cC326B579aaAB08846E09e569aF296C9a",
      "txHash": "0x309e54441432e6652af7ff6899f1485ba4a07da0688a96f722f87d9adb5c67cb",
      "kind": "uups"
    },
    {
      "address": "0x4F14CE57617D95A36A0f9DB70C46D2194b13C6A9",
      "txHash": "0x4b4854739b593acf78beb5740b3fe1ed801f95c7d8a749bc331defcac4d91d95",
      "kind": "uups"
    },
    {
      "address": "0x9D509cBDd07034A81588b915148646a06A996FA7",
      "txHash": "0x524e02227008ee28b572db9cd8df8770623bc59ea665b03ef35862b81324c707",
      "kind": "uups"
    },
    {
      "address": "0x1c9b67FbfBfD42Df0386A81cf98Aa6241fE7711F",
      "txHash": "0x32d8d64b2d63092cbaac019f09f159988e2970ed47ff9047e206b4374cf37fb5",
      "kind": "uups"
    },
    {
      "address": "0xC5517E754711F8659e174e7a7191A4B649a2C0CE",
      "txHash": "0xa2feaae2ef8de6be51526bba9dabef6eb10340f1ac507b48b071f79fecb78234",
      "kind": "uups"
    },
    {
      "address": "0x60e66EBD5D227Fc3451F2F23fA9680B36ae4C395",
      "txHash": "0xe82f091bccd5e2da0720a6dad32a3054cc5cedc9aca5cd94f617e75007f6a45a",
      "kind": "uups"
    },
    {
      "address": "0x8b9AEe74C597C45800Cb05084b83040D77aF2188",
      "txHash": "0xdb8d8388c716017bfc6dce78a15cd9de0544cf0d6a3e1c562f22a8c725c35c24",
      "kind": "uups"
    },
    {
      "address": "0x5d442755B1D9093D5A0feb9c3caB42CCe8C247Aa",
      "txHash": "0xc65614e19134cb4b04f3e1f1d3f60fc9a859caa2319cf5188e377e0b36299915",
      "kind": "uups"
    },
    {
      "address": "0xbD6E6fB11e6b7705D4df8dc52E45108615Ada233",
      "txHash": "0x07223c7ad6305200e213e0151213b54d055e2d9c2460a5bad56a846f6d50f83e",
      "kind": "uups"
    },
    {
      "address": "0x7bf390fb2972cb731bF2Afa33Fb08512Fc511D2d",
      "txHash": "0xa8b2bf30e06def281e419c8529e28a656d38f1a5e07387640d329c41bc4262d5",
      "kind": "uups"
    },
    {
      "address": "0x11B0633E0ED6DFb7ffB81F718EFB6916f0dA9508",
      "txHash": "0x4c1bc950c5379bcccdfdf6f6a28c5e9bd781f11d11e0974de442425ac258a869",
      "kind": "uups"
    },
    {
      "address": "0xdCC2CaC223Ec5D41Fa0CecEa24E687727a526F58",
      "txHash": "0xbd29a8a4f2bbf5bdcca640101b076e37d68ccd1faafc864f5434c8031b844bfb",
      "kind": "uups"
    },
    {
      "address": "0xdD14d85962dA790ed3D5760892eF61A60448013C",
      "txHash": "0x88e7730a83aaa946950736bf6fc577924947797eec02b479e04857c3c0ca5ed6",
      "kind": "uups"
    },
    {
      "address": "0xf50a4260757C9abDAB9Fba476829698F535e164c",
      "txHash": "0x66082be60144184e5ca775ede7db38572dbc500ccaede6a36a4290e479d2ab40",
      "kind": "uups"
    },
    {
      "address": "0xd4c17928739a1f6aA881ea6574AAF5c4505351fC",
      "txHash": "0xfa4b23040198b7e680aed2e13cf048b7b301fda94c44d3f29e3b76f26663fd85",
      "kind": "uups"
    },
    {
      "address": "0x2d472843a65D9009F77C255f210AFe5b946a5109",
      "txHash": "0x0c8060e7ca57a182c9ef74cceed42eb8b236e6ca84de858a013a55b992a2cb74",
      "kind": "uups"
    },
    {
      "address": "0x1858efabd1Aa22233E4A6298933e6Faf32f2A663",
      "txHash": "0xd762fdfccf52d4182ec61aea22e5829d5439aab44ac8f7d1ed875ef1c0b4e93d",
      "kind": "uups"
    }
  ],
  "impls": {
    "9c0faec44a7b67e56736738367e9ad2d4836886048274a9205abe0fdd2bb2dd3": {
      "address": "0xB3BF80d17ED7Fc774591B531be8381d342BE5929",
      "txHash": "0xa7bf2ab918c145e128b78186eada13390fc6d42d6afa9dcbafa02de066b6aaf9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:167"
          },
          {
            "contract": "BrooderNft",
            "label": "brooder",
            "type": "t_mapping(t_uint256,t_struct(Brooder)14731_storage)",
            "src": "contracts/NFTs/BrooderNft.sol:20"
          },
          {
            "contract": "BrooderNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BrooderNft.sol:59"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Brooder)14731_storage)": {
            "label": "mapping(uint256 => struct BrooderNft.Brooder)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Brooder)14731_storage": {
            "label": "struct BrooderNft.Brooder",
            "members": [
              {
                "label": "breedTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "a1afc4412f1cd38ac576d0e3c6828d8dd170fa8a7a471eb243fcf50f26f58634": {
      "address": "0xde2aB74Ed084f87Ac9a2cC3bd37A0Abdf8de931C",
      "txHash": "0xebd867c32de17332d2b27a0083b2d841404bbe65332d4c8ab8fb5174a4c683fc",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)17415_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:167"
          },
          {
            "contract": "EggBase",
            "label": "egg",
            "type": "t_mapping(t_uint256,t_struct(Egg)15365_storage)",
            "src": "contracts/NFTs/EggBase.sol:8"
          },
          {
            "contract": "EggBase",
            "label": "hatchTime",
            "type": "t_uint256",
            "src": "contracts/NFTs/EggBase.sol:10"
          },
          {
            "contract": "EggBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggBase.sol:116"
          },
          {
            "contract": "EggNft",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)17250",
            "src": "contracts/NFTs/EggNft.sol:18"
          },
          {
            "contract": "EggNft",
            "label": "brooderContract",
            "type": "t_contract(BrooderNft)15096",
            "src": "contracts/NFTs/EggNft.sol:19"
          },
          {
            "contract": "EggNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggNft.sol:179"
          }
        ],
        "types": {
          "t_contract(MafagafoAvatarNft)17250": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(BrooderNft)15096": {
            "label": "contract BrooderNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Egg)15365_storage)": {
            "label": "mapping(uint256 => struct EggBase.Egg)"
          },
          "t_struct(Egg)15365_storage": {
            "label": "struct EggBase.Egg",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "hatchDate",
                "type": "t_uint256"
              },
              {
                "label": "breeding",
                "type": "t_bool"
              },
              {
                "label": "brooderType",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)17415_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)17415_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)17415_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "41cf3ab2817a6d0c62dd0684b9a1d0370abf0619741cef67c15b3a450bf8b957": {
      "address": "0xe3c330f6416B22A123368B9EdC2303E2f9Ad7bE6",
      "txHash": "0x3f6be9656d5c5bfadf6bb8a1c166bdec4ad0bc80c258ad877a7880fa9505b91a",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)17415_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:167"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)16358_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:162"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)15981",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "mafaVersion",
            "type": "t_uint16",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:21"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:189"
          }
        ],
        "types": {
          "t_contract(EggNft)15981": {
            "label": "contract EggNft"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)16358_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)16358_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "flags",
                "type": "t_uint32"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)17415_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)17415_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)17415_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "72911cff16c72d9fa2a84038edf501996ad9b865d5c1c8344889ce3aac27363c": {
      "address": "0x13f410cb165A3e4007B5178113d5E35147738b36",
      "txHash": "0x0c81ecc7d63bea25ad4e606947a719fe0bd9a0359a78592e9ffef6a97d533afd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:167"
          },
          {
            "contract": "MafaBox",
            "label": "_totalOpen",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/MafaBox.sol:17"
          },
          {
            "contract": "MafaBox",
            "label": "probabilities",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NFTs/MafaBox.sol:18"
          },
          {
            "contract": "MafaBox",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)17250",
            "src": "contracts/NFTs/MafaBox.sol:20"
          },
          {
            "contract": "MafaBox",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafaBox.sol:125"
          }
        ],
        "types": {
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(MafagafoAvatarNft)17250": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    }
  }
}
