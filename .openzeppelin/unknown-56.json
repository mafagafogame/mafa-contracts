{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x76413Cf9c513cf6A4f34424C87B3F690841332DE",
      "txHash": "0x7dce66f9ccb0dc87698be21a21df643aa0a410afbf49701b077ddd289bc1162f",
      "kind": "uups"
    },
    {
      "address": "0x46488e59263310049F1c6F2d5172A89e33989D68",
      "txHash": "0xa68965fea438c68f376be85671a90303eaf9d22a6c8de1457787dc5985f49f27",
      "kind": "uups"
    },
    {
      "address": "0xb0f66D39c0093b68Ed555b7739947EC10F9e31E6",
      "txHash": "0xda53da1ccc84a2fdfe610f8a0bc2e62d905f0ceade2f81bd49952fb2bce0a082",
      "kind": "uups"
    },
    {
      "address": "0xF2364a7F500A755F28800A752dC5bFEC768Dd75E",
      "txHash": "0xe97416276f279e71ff701c98b93275f5083316f83f6304ae04a0d0bbf5be9e59",
      "kind": "uups"
    },
    {
      "address": "0xC93E78e0EcbA3bfD59Dec37BAb2f66fD713ccFcA",
      "txHash": "0x5b8fb288c34daecc1ab72ee574db52b17a6b6c550cf85c870fdb7f11dda48d53",
      "kind": "uups"
    }
  ],
  "impls": {
    "9c0faec44a7b67e56736738367e9ad2d4836886048274a9205abe0fdd2bb2dd3": {
      "address": "0xbdef4dE02E89011bE08255352e11571Eb6Aec340",
      "txHash": "0x65478d18ec4f31e7f0d6f42a85d58f50076f871d7677ccb67cd86cc6b42ed9fb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:167"
          },
          {
            "contract": "BrooderNft",
            "label": "brooder",
            "type": "t_mapping(t_uint256,t_struct(Brooder)13062_storage)",
            "src": "contracts/NFTs/BrooderNft.sol:20"
          },
          {
            "contract": "BrooderNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BrooderNft.sol:59"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Brooder)13062_storage)": {
            "label": "mapping(uint256 => struct BrooderNft.Brooder)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Brooder)13062_storage": {
            "label": "struct BrooderNft.Brooder",
            "members": [
              {
                "label": "breedTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "01a043ea7f85a0a04996b59601df9175b177b1224b93d291effbb6a19556e6db": {
      "address": "0x408feBDAA6A22b648aa2fE12C03368bd3d1f8679",
      "txHash": "0x47fe11fdc527f705a771f53ef7be34906d7be2c1aa70550d4317498b6279236e",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)15258_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:121"
          },
          {
            "contract": "EggBase",
            "label": "egg",
            "type": "t_mapping(t_uint256,t_struct(Egg)13417_storage)",
            "src": "contracts/NFTs/EggBase.sol:8"
          },
          {
            "contract": "EggBase",
            "label": "hatchTime",
            "type": "t_uint256",
            "src": "contracts/NFTs/EggBase.sol:10"
          },
          {
            "contract": "EggBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggBase.sol:116"
          },
          {
            "contract": "EggNft",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)15093",
            "src": "contracts/NFTs/EggNft.sol:18"
          },
          {
            "contract": "EggNft",
            "label": "brooderContract",
            "type": "t_contract(BrooderNft)13148",
            "src": "contracts/NFTs/EggNft.sol:19"
          },
          {
            "contract": "EggNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggNft.sol:177"
          }
        ],
        "types": {
          "t_contract(MafagafoAvatarNft)15093": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(BrooderNft)13148": {
            "label": "contract BrooderNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Egg)13417_storage)": {
            "label": "mapping(uint256 => struct EggBase.Egg)"
          },
          "t_struct(Egg)13417_storage": {
            "label": "struct EggBase.Egg",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "hatchDate",
                "type": "t_uint256"
              },
              {
                "label": "breeding",
                "type": "t_bool"
              },
              {
                "label": "brooderType",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)15258_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)15258_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)15258_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "a38d40249030515305ccfb029f904f1470148a6b0558144c65f93f57c6995cd1": {
      "address": "0xbFfeB1C1a715E01c8E580a14dD051Fe344662bFE",
      "txHash": "0x4741416a631cc7daa45b60144df0f743f3b8fdcdc9e2fdac12d0fa40c8fe08d7",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)15258_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:121"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)14366_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:141"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)14025",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "mafaVersion",
            "type": "t_uint16",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:21"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:164"
          }
        ],
        "types": {
          "t_contract(EggNft)14025": {
            "label": "contract EggNft"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)14366_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)14366_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "flags",
                "type": "t_uint32"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)15258_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)15258_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)15258_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "da80fd6042cb916ac3f2b03ba2e18021cc933a9b833e2923efcd1896f8a1992f": {
      "address": "0x3f75436f4a3a43A75B216113B0Eb35B22687FE39",
      "txHash": "0x6a48f8c013baad159fbdda1d12ca0c76663d96b454808568a9fd465b7eba15dd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:44"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)15093",
            "src": "contracts/DirectSale/MafaStore.sol:45"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:47"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:48"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9965_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:481"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)15093": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9965_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9965_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "931cdbeb61c3e9aa7e7ca5f387316e36a2c223ec62a6884b17dfc7a588ec4097": {
      "address": "0x49EA3E2cB9DeFa4B1636B45fC0A2960d373B1b1A",
      "txHash": "0x516d128ab73df6093463ef7dea74fbb67aab6588dc44905ef1647e1da8e45c78",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:167"
          },
          {
            "contract": "MafaBox",
            "label": "_totalOpen",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/MafaBox.sol:17"
          },
          {
            "contract": "MafaBox",
            "label": "probabilities",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NFTs/MafaBox.sol:18"
          },
          {
            "contract": "MafaBox",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)15093",
            "src": "contracts/NFTs/MafaBox.sol:20"
          },
          {
            "contract": "MafaBox",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafaBox.sol:114"
          }
        ],
        "types": {
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(MafagafoAvatarNft)15093": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "7cca767f8ebb1eb9dcba4846416ac10d1ab7f59a156f381437e216246b989f79": {
      "address": "0x542bFfAE215B1b5493e7A48C0746B0E9CA35fc00",
      "txHash": "0x32c6097179ad8f0db67b377053cd2a7cc2767d238b3ac2bc8b90da65b207bf07",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:50"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)17066",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:53"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9966_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:57"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:60"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:565"
          },
          {
            "contract": "MafaStore",
            "label": "dailyVolumes",
            "type": "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)",
            "src": "contracts/DirectSale/MafaStore.sol:567"
          },
          {
            "contract": "MafaStore",
            "label": "dailySellPercentage",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:569"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)17066": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9966_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9966_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)": {
            "label": "mapping(address => struct MafaStore.SellVolume[])"
          },
          "t_array(t_struct(SellVolume)9971_storage)dyn_storage": {
            "label": "struct MafaStore.SellVolume[]"
          },
          "t_struct(SellVolume)9971_storage": {
            "label": "struct MafaStore.SellVolume",
            "members": [
              {
                "label": "date",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "da95bb0df686220211b6a8b4ababd0f064fa4c08c6f52438feb389c5d6b7701b": {
      "address": "0x51Df76B338CE27e4E3f9fbfc1b81C32283aeAEAc",
      "txHash": "0xcef620b168ac6d5f1e099db2878f626595ab99127d4b4cf9ca478a4b5e13137b",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "51",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "101",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "151",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1967UpgradeUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UUPSUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "251",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "351",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155ReceiverUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:31"
          },
          {
            "label": "acceptedToken",
            "offset": 0,
            "slot": "401",
            "type": "t_contract(IERC20)7325",
            "contract": "MafaStore",
            "src": "contracts/DirectSale/MafaStore.sol:60"
          },
          {
            "label": "avatarContract",
            "offset": 0,
            "slot": "402",
            "type": "t_contract(MafagafoAvatarNft)17240",
            "contract": "MafaStore",
            "src": "contracts/DirectSale/MafaStore.sol:61"
          },
          {
            "label": "_mafaBnbPair",
            "offset": 0,
            "slot": "403",
            "type": "t_contract(IUniswapV2Pair)9550",
            "contract": "MafaStore",
            "src": "contracts/DirectSale/MafaStore.sol:63"
          },
          {
            "label": "_bnbBusdPair",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IUniswapV2Pair)9550",
            "contract": "MafaStore",
            "src": "contracts/DirectSale/MafaStore.sol:64"
          },
          {
            "label": "items",
            "offset": 0,
            "slot": "405",
            "type": "t_array(t_struct(Item)9991_storage)dyn_storage",
            "contract": "MafaStore",
            "src": "contracts/DirectSale/MafaStore.sol:67"
          },
          {
            "label": "avatarPrice",
            "offset": 0,
            "slot": "406",
            "type": "t_uint256",
            "contract": "MafaStore",
            "src": "contracts/DirectSale/MafaStore.sol:70"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "407",
            "type": "t_array(t_uint256)50_storage",
            "contract": "MafaStore",
            "src": "contracts/DirectSale/MafaStore.sol:615"
          },
          {
            "label": "dailyVolumes",
            "offset": 0,
            "slot": "457",
            "type": "t_mapping(t_address,t_array(t_struct(SellVolume)9996_storage)dyn_storage)",
            "contract": "MafaStore",
            "src": "contracts/DirectSale/MafaStore.sol:617"
          },
          {
            "label": "dailySellPercentage",
            "offset": 0,
            "slot": "458",
            "type": "t_uint256",
            "contract": "MafaStore",
            "src": "contracts/DirectSale/MafaStore.sol:619"
          },
          {
            "label": "ticketSeller",
            "offset": 0,
            "slot": "459",
            "type": "t_address_payable",
            "contract": "MafaStore",
            "src": "contracts/DirectSale/MafaStore.sol:624"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Item)9991_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SellVolume)9996_storage)dyn_storage": {
            "label": "struct MafaStore.SellVolume[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20)7325": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(IUniswapV2Pair)9550": {
            "label": "contract IUniswapV2Pair",
            "numberOfBytes": "20"
          },
          "t_contract(MafagafoAvatarNft)17240": {
            "label": "contract MafagafoAvatarNft",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_struct(SellVolume)9996_storage)dyn_storage)": {
            "label": "mapping(address => struct MafaStore.SellVolume[])",
            "numberOfBytes": "32"
          },
          "t_struct(Item)9991_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tokenId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "title",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "price",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(SellVolume)9996_storage": {
            "label": "struct MafaStore.SellVolume",
            "members": [
              {
                "label": "date",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      }
    }
  }
}
