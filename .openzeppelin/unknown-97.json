{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xFdE99e65fC949B3fC4ef7e4Db4f6B4b84A5ef060",
      "txHash": "0xbec178a0fc7ea2f93febe06b4946dd1ebc53c505bebe394878efae011d5b44d6",
      "kind": "uups"
    },
    {
      "address": "0xc36DAEa6dDfFC81172125BA0ca3510D3873A3204",
      "txHash": "0x2cb101cdc76febbb4ff09885141577276471aacd1631108648b19c063bfa8fa0",
      "kind": "uups"
    },
    {
      "address": "0xF8b29C68f44c1c707a3B987B9dBa99eDe648ae3e",
      "txHash": "0xac2cecec2e815c9c8dfa7cb424e8048a9d4d00550bba88fad622f45fe96fca92",
      "kind": "uups"
    },
    {
      "address": "0x9b12D64D1015cb852967175E9aebDa3bF93C095E",
      "txHash": "0x747d02aa13be423eae1a1fe63e6293391908b96e7a26680b63ffbfe643928e19",
      "kind": "uups"
    },
    {
      "address": "0xAA7Bee5270E1c0d17346dA9a057F22E256514bb8",
      "txHash": "0x07c761a122cc2eb8c9e05f64fdeed26f8a5bb64c3e91370c4735553b35d81289",
      "kind": "uups"
    },
    {
      "address": "0x69d4b083d191D7C7094490ECF8Bf553b338c6642",
      "txHash": "0x261ad60994e7ae4a2223e4e059105c14af5413c39a4d265a76a6d5796bf18985",
      "kind": "uups"
    },
    {
      "address": "0x8EdD09849F6DFfB233A3e7701daA38838D68Dc28",
      "txHash": "0x87e1c96fb648091f5961bc131ee83ee1b7edc162984672b205823f7f35b56a9d",
      "kind": "uups"
    },
    {
      "address": "0x61Ed10301FD7C9a43357866Ae37a81A2ce947b5b",
      "txHash": "0xc7ce3a7fdc88dec3080de79f328eaee0769def735a21341e103b5e3946d0598b",
      "kind": "uups"
    },
    {
      "address": "0xBC031950d00FEE08Fd8988cef5128650B15e94d1",
      "txHash": "0xea89ed75491964440caa05ed495469cd32edcfff328361bc6ec108d8bf386272",
      "kind": "uups"
    },
    {
      "address": "0x5F95AA07B7b8adCC67145563eB942d1d5DE93b4a",
      "txHash": "0xe18c2c2525b142ffb4b520529bdc131135a00144fbd1a61305cca8c16797ca3a",
      "kind": "uups"
    },
    {
      "address": "0x6cde06Cd7C9306d092aFEf037ABc43457567f90f",
      "txHash": "0x4dd7b9cd760cbd00c4f45569d1b9f154bb5850eeb43b9331007e1cabdf132046",
      "kind": "uups"
    },
    {
      "address": "0x56C25a6eEADABc27C46aAD116f7bB34BAA0E2392",
      "txHash": "0x5c3e0dda2c58e46e13a674808563a01b36553600e436fbfef06ef4b2bf0ecf52",
      "kind": "uups"
    },
    {
      "address": "0xa69DceA037bb197cBE77d06Db574E4c87e48F307",
      "txHash": "0xc261056aec57767ed86881863e7d1e0114327429c7659954f60656b1983cf36a",
      "kind": "uups"
    },
    {
      "address": "0xD3D5A783582347bB69EFa481d77CF352BCf18B24",
      "txHash": "0x82fb0f29fef3a60877483544890d92101fb87da5e0140ef5d4ff8c2bed2f71eb",
      "kind": "uups"
    },
    {
      "address": "0x1A8705840dCab4b3e6814179ca368DfBf438E402",
      "txHash": "0x06167d57b5ab076f42bce6006b7040fdfd48436779d4c756a155438e48e5caad",
      "kind": "uups"
    },
    {
      "address": "0x4ED5fc6b199Ee48DF1B6b21Be91255A1fEe8Fbc0",
      "txHash": "0x47d1e26ae026febbd0344a3f6e5ea59c96537b29c45cc7f3ec5a1ffa5be481ce",
      "kind": "uups"
    },
    {
      "address": "0x94e0D7eF6017f20c9373571832F8903cd4f8D76C",
      "txHash": "0xbf2c520529419d9184036a3947e568d1b1a30920c3f67c11f75feb7deef95f9d",
      "kind": "uups"
    },
    {
      "address": "0x7c6EaaAC091b372f2509076c981D90333841BcC1",
      "txHash": "0x6941ef739cdea71d4362d3756d5db43c375fe02bddf85605e21168c44596067b",
      "kind": "uups"
    },
    {
      "address": "0xdd3630b9920496C1D21F06c57C2047404c63e1Db",
      "txHash": "0x6c39a5276b17cec93c3021b48942b7abf63604c279881157fb3b8b9388f2287b",
      "kind": "uups"
    },
    {
      "address": "0xaD4B2C7C01D69BeFCba32Cb3f0656fCefb6aE3E5",
      "txHash": "0xfc0cb748c537b6b7ef1cb923fde362794f01f4d7c21331273ef96b1dd86f4d1e",
      "kind": "uups"
    },
    {
      "address": "0xc4d46F8D62e4F259eC84d0995186B9Ab19147ba5",
      "txHash": "0x9ae6fd110b5c82f65964227b3cb6495b4287534b183b0ad5f6a4dfee84591266",
      "kind": "uups"
    },
    {
      "address": "0x14a9a6fA116f7e7Ebf58560C488835C80111d2d2",
      "txHash": "0xbafa022177f678de3289c58c2d55e67938ac057a90ec6d0a8269d9c5dacf5747",
      "kind": "uups"
    },
    {
      "address": "0x68f9B1015973A6B41128369Ec2ff59b8d9c6bC8A",
      "txHash": "0xd43c16d9e2edc6e2b203a7025516adf75024611631c4f2cfcb69da85cc669078",
      "kind": "uups"
    },
    {
      "address": "0x2C0C23238a387Fc23ce0F6226b0B82Ed1A041f44",
      "txHash": "0x054382c9b1103c3af867146ed3df519fb1a7189a7a3539d7322977c6cd098228",
      "kind": "uups"
    },
    {
      "address": "0x0c653E6FDCFbe37d73330655f1b7bB2ab4E05533",
      "txHash": "0xbb8883bcda418a72cc1d4d2b9314603807a8606252feb57af1ae2fd28f9f68c7",
      "kind": "uups"
    },
    {
      "address": "0xEB461AE55478f62eF2DdC3E362955b64E2935F59",
      "txHash": "0x1cd2f16135e7a625eefc9ddf579d3775539a2646ce503e5d06535c53e9239b9b",
      "kind": "uups"
    },
    {
      "address": "0x2041bC199Acd1ddd7c05b45e32Dff02DF518aD1D",
      "txHash": "0x33e3eeec63ff2e15419fdc042d5ab9864fc92de0b1e1e80e14d6819f66fafb68",
      "kind": "uups"
    },
    {
      "address": "0xd5b3E562a750e15AD9847a3BDdcF6906A6939e69",
      "txHash": "0xf22d30f13e5825f794e74d5c3bab840233cb6895d1c1d936d6232db7022eb835",
      "kind": "uups"
    }
  ],
  "impls": {
    "f6c5ceb24f12762134cd529997c4d47a62d005a44b89df1ea8cb641c874d651a": {
      "address": "0x9227653A31669B571382775aFf17093c3048C865",
      "txHash": "0xed1f1b41e903bc292176fc7ef75d59d7f3e20deb2cb4c950bacf7e419a68c9f3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:99"
          },
          {
            "contract": "BrooderNft",
            "label": "brooder",
            "type": "t_mapping(t_uint256,t_struct(Brooder)12258_storage)",
            "src": "contracts/NFTs/BrooderNft.sol:20"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Brooder)12258_storage)": {
            "label": "mapping(uint256 => struct BrooderNft.Brooder)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Brooder)12258_storage": {
            "label": "struct BrooderNft.Brooder",
            "members": [
              {
                "label": "breedTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "088f71ca89faf67d34a33631f68624749e710f40f7a8aa4649742226f7a9e5b5": {
      "address": "0x5ddC0767d7312d63B70F021a8C41f62c828A14F2",
      "txHash": "0x2082c310983ae2a53e59f3d05c3798f53e1c55d43f53862be50ae329bbc8aff6",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)13763_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:106"
          },
          {
            "contract": "EggBase",
            "label": "egg",
            "type": "t_mapping(t_uint256,t_struct(Egg)12607_storage)",
            "src": "contracts/NFTs/EggBase.sol:8"
          },
          {
            "contract": "EggNft",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)13598",
            "src": "contracts/NFTs/EggNft.sol:17"
          },
          {
            "contract": "EggNft",
            "label": "brooderContract",
            "type": "t_contract(BrooderNft)12340",
            "src": "contracts/NFTs/EggNft.sol:18"
          }
        ],
        "types": {
          "t_contract(MafagafoAvatarNft)13598": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(BrooderNft)12340": {
            "label": "contract BrooderNft"
          },
          "t_mapping(t_uint256,t_struct(Egg)12607_storage)": {
            "label": "mapping(uint256 => struct EggBase.Egg)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Egg)12607_storage": {
            "label": "struct EggBase.Egg",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "hatchDate",
                "type": "t_uint256"
              },
              {
                "label": "breeding",
                "type": "t_bool"
              },
              {
                "label": "brooderType",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)13763_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)13763_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)13763_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "54da6b43debcc35afbe4ef2faf05842c75d1a733b6db995536ebb3cd4dcbf50a": {
      "address": "0xb853623A01ec46aDF22e127164C9090d0BfD372a",
      "txHash": "0xdc4d4221e850e661eeb7288220368f5a242e609bb1f768d9741717c334ad1265",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)13763_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:106"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)13251_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)12976",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          }
        ],
        "types": {
          "t_contract(EggNft)12976": {
            "label": "contract EggNft"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)13251_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Mafagafo)13251_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)13763_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)13763_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)13763_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "e8c78c0e0f20e0bc36794c5869ed31c6591eca151e2e49d3a963026127718cae": {
      "address": "0x7Ad3E468A96bfb7909A3Ec6183eeee570B7f89CA",
      "txHash": "0x09e65d6d506a0a55469803cc67c40d4d3af3d4d5fe23273c7c00b606b0639657",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:39"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)13598",
            "src": "contracts/DirectSale/MafaStore.sol:40"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:42"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:43"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9963_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:45"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:344"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)13598": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9963_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9963_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "cedfd8207fdf096e87aff055eaadda0edfd4dceee83a98b4c61aa404810641b4": {
      "address": "0x831Bb554351c31f06c3D41fec5e0ea3C7519698C",
      "txHash": "0xa67154612ad6250430ce5d40a89ef63a48faaac22dc373469fbac375689f1e24",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:99"
          },
          {
            "contract": "MafaBox",
            "label": "_totalOpen",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/MafaBox.sol:17"
          },
          {
            "contract": "MafaBox",
            "label": "probabilities",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NFTs/MafaBox.sol:18"
          },
          {
            "contract": "MafaBox",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)13598",
            "src": "contracts/NFTs/MafaBox.sol:20"
          }
        ],
        "types": {
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(MafagafoAvatarNft)13598": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "ff53cfff37eafa3422e4dbeac121bd434592e11fa34ee52f2cf9ca138216fd23": {
      "address": "0x5FA535b98BeD3dd48d6710C40EcF1Bc368678Db2",
      "txHash": "0xb2079faf2de933f75fed99d416821f577fd7f5e733b54c8214919fd8ccd3f950",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:44"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)13895",
            "src": "contracts/DirectSale/MafaStore.sol:45"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:47"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:48"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9965_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:418"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)13895": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9965_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9965_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "7394bba987cdcd6a9fbe14510762980d3e00e9da154188b0ae5ae3c80bedcec5": {
      "address": "0x56e3f68d48CC22Cc34C79424eD81Bf631EF82D57",
      "txHash": "0xf3659bdd461040b2b37819e7e909da815fd1c50bb6e7793e04573232625cb620",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:44"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)13941",
            "src": "contracts/DirectSale/MafaStore.sol:45"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:47"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:48"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9965_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:435"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)13941": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9965_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9965_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "50a2b8b2a95b0e2946a6e4c444c57ae04b23940ae758d78faaa5a6bb0c5a2cc0": {
      "address": "0xf8dA6B7FF829bdA64958CC886DBF258F184E14a2",
      "txHash": "0x77b0215f052186ae3a4b0cd47a5964b61689666621dd036cc6c62abacb0b0803",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:44"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)13955",
            "src": "contracts/DirectSale/MafaStore.sol:45"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:47"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:48"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9965_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:437"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)13955": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9965_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9965_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "6eb4730c4a118264f117e6f49fd5c5a2eb737efeb9fc06cb3af685df729bb087": {
      "address": "0xC6B77582d0d18FB0d1Ef9525e77cC32EBC474aFc",
      "txHash": "0xfdc7b4b8e94bc3b0976fe004197ac0f25296c136293b8b09c90e48c35a60e349",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:44"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)14082",
            "src": "contracts/DirectSale/MafaStore.sol:45"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:47"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:48"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9965_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:451"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)14082": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9965_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9965_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "860820379221a3741674cf0b3008db636a6bddcf2c15d40bf34a9b058409bb40": {
      "address": "0x822dD45c3671649fB121BaB0fA61b7Ca32B189aF",
      "txHash": "0x63a7651374c2e2cf9a127daeefd18fc05f57498f08e318f67f21555cf0e28ffe",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:168"
          },
          {
            "contract": "BrooderNft",
            "label": "brooder",
            "type": "t_mapping(t_uint256,t_struct(Brooder)12924_storage)",
            "src": "contracts/NFTs/BrooderNft.sol:20"
          },
          {
            "contract": "BrooderNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BrooderNft.sol:59"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Brooder)12924_storage)": {
            "label": "mapping(uint256 => struct BrooderNft.Brooder)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Brooder)12924_storage": {
            "label": "struct BrooderNft.Brooder",
            "members": [
              {
                "label": "breedTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "5069137deb3a648a0dec283201f95590a50397585140caabadf22338bf720cb5": {
      "address": "0xF511Bad45BF0eA127beb0E2E0E5573978D927528",
      "txHash": "0xe5885889a1a626c2461cf96a8348efdafbd1c10a8a7216d6072623bb1e99fc07",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:168"
          },
          {
            "contract": "MafaBox",
            "label": "_totalOpen",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/MafaBox.sol:17"
          },
          {
            "contract": "MafaBox",
            "label": "probabilities",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NFTs/MafaBox.sol:18"
          },
          {
            "contract": "MafaBox",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)14935",
            "src": "contracts/NFTs/MafaBox.sol:20"
          },
          {
            "contract": "MafaBox",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafaBox.sol:121"
          }
        ],
        "types": {
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(MafagafoAvatarNft)14935": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "7f211341c5bd339b2c65c7bcf0688751c21ebb4fdcfc4652cb632dfacf8745e3": {
      "address": "0x74Bd17984d2633681BD4Cd42021e4c7D78d9f4DB",
      "txHash": "0x180f564bf3648bfeda0089f7811a14cff7980b1acbed7b00d161be8eed36e183",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)14914_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:107"
          },
          {
            "contract": "EggBase",
            "label": "egg",
            "type": "t_mapping(t_uint256,t_struct(Egg)13332_storage)",
            "src": "contracts/NFTs/EggBase.sol:8"
          },
          {
            "contract": "EggBase",
            "label": "hatchTime",
            "type": "t_uint256",
            "src": "contracts/NFTs/EggBase.sol:10"
          },
          {
            "contract": "EggBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggBase.sol:79"
          },
          {
            "contract": "EggNft",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)14749",
            "src": "contracts/NFTs/EggNft.sol:18"
          },
          {
            "contract": "EggNft",
            "label": "brooderContract",
            "type": "t_contract(BrooderNft)13063",
            "src": "contracts/NFTs/EggNft.sol:19"
          },
          {
            "contract": "EggNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggNft.sol:164"
          }
        ],
        "types": {
          "t_contract(MafagafoAvatarNft)14749": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(BrooderNft)13063": {
            "label": "contract BrooderNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Egg)13332_storage)": {
            "label": "mapping(uint256 => struct EggBase.Egg)"
          },
          "t_struct(Egg)13332_storage": {
            "label": "struct EggBase.Egg",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "hatchDate",
                "type": "t_uint256"
              },
              {
                "label": "breeding",
                "type": "t_bool"
              },
              {
                "label": "brooderType",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)14914_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)14914_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)14914_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "783b100bf8a04e213c24b3a103d400c54708af4ef1b2b72e56de05f23d13cdee": {
      "address": "0x9e5176b24836a4Fe74430E6F823F48DE638b9552",
      "txHash": "0xc626d628aa0ed1b7e376e1d7ad9ef72bf1648b3458a5931ed9c888a7fcc78608",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)14832_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:107"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)14223_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:66"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)13839",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:135"
          }
        ],
        "types": {
          "t_contract(EggNft)13839": {
            "label": "contract EggNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)14223_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)14223_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)14832_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)14832_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)14832_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "35eae04bba620d17ddcc9a3a50f349203c303906b2e1b80da34bfe9b0b148c15": {
      "address": "0x1AB798c61e581136e75c90c1B95aA010BEcD114c",
      "txHash": "0x6bb48c3401e30cf78b3700c58e69c3dd3e634645e0e0c987c961a2a939532eeb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:44"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)14673",
            "src": "contracts/DirectSale/MafaStore.sol:45"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:47"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:48"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9965_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:477"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)14673": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9965_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9965_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "93195a49dfeb722e889c2d12b19273c15ccc551776b189efdd26de9f6cb5d47a": {
      "address": "0xEE32c38a9C8924ffAA7dbe5463B5f67734FaF6a5",
      "txHash": "0xa052d8d7b02dbc15adaa37b932c16efdef021071e07365e042cb765f1e957f80",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)14838_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:107"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)14225_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:78"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)13839",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:135"
          }
        ],
        "types": {
          "t_contract(EggNft)13839": {
            "label": "contract EggNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)14225_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)14225_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              },
              {
                "label": "flags",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)14838_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)14838_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)14838_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "81804507c013ccbdee264144c681dc99ba1210b6286d229ef9d3fa207f332267": {
      "address": "0x3dc6854929dCD7D59F924460624ABb667944b40A",
      "txHash": "0x6d00e9a9aa0a2f193d94eb94290f61f3eb194f8e899a3be4a37cbf6d473c12d9",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)14976_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:107"
          },
          {
            "contract": "EggBase",
            "label": "egg",
            "type": "t_mapping(t_uint256,t_struct(Egg)13332_storage)",
            "src": "contracts/NFTs/EggBase.sol:8"
          },
          {
            "contract": "EggBase",
            "label": "hatchTime",
            "type": "t_uint256",
            "src": "contracts/NFTs/EggBase.sol:10"
          },
          {
            "contract": "EggBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggBase.sol:111"
          },
          {
            "contract": "EggNft",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)14811",
            "src": "contracts/NFTs/EggNft.sol:18"
          },
          {
            "contract": "EggNft",
            "label": "brooderContract",
            "type": "t_contract(BrooderNft)13063",
            "src": "contracts/NFTs/EggNft.sol:19"
          },
          {
            "contract": "EggNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggNft.sol:164"
          }
        ],
        "types": {
          "t_contract(MafagafoAvatarNft)14811": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(BrooderNft)13063": {
            "label": "contract BrooderNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Egg)13332_storage)": {
            "label": "mapping(uint256 => struct EggBase.Egg)"
          },
          "t_struct(Egg)13332_storage": {
            "label": "struct EggBase.Egg",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "hatchDate",
                "type": "t_uint256"
              },
              {
                "label": "breeding",
                "type": "t_bool"
              },
              {
                "label": "brooderType",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)14976_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)14976_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)14976_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "59617b532dabfc20ce595abbcbac5bcbb072929cfad1e1b8ea1da34f07fb93e0": {
      "address": "0x885015AFEe80a57A08198eF76f1f1B48403776FF",
      "txHash": "0x834b0ecb152a981a9b27bafcb2db82e368dee3823032dd4f4da4e6a8618086ba",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)14976_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:107"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)14298_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:112"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)13912",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:139"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "mafaVersion",
            "type": "t_uint16",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:141"
          }
        ],
        "types": {
          "t_contract(EggNft)13912": {
            "label": "contract EggNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)14298_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)14298_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              },
              {
                "label": "flags",
                "type": "t_uint32"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)14976_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)14976_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)14976_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "812ba7d971bd5b2f86768fec1e3cb8d49b21f13ebc48813beb579975af4fb389": {
      "address": "0x7974E60a09C59722692A1d4fEC3D229734dD1283",
      "txHash": "0x2e310f84e12408210ca7572e843b7996d925a946b87f0e326bd0d745f2d763d9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:44"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)14811",
            "src": "contracts/DirectSale/MafaStore.sol:45"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:47"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:48"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9965_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:481"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)14811": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9965_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9965_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "d1c515ba43da30498fc7a8126954237cbbb337753c01c84062de5fdfec725ab4": {
      "address": "0xF47777EF390986f8A8e00DEa8398bD7f7bb8Fe3A",
      "txHash": "0xe32bc97747eca3342320434eddf894d46df97bd82996a6879622e97b894a04f1",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)15103_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:123"
          },
          {
            "contract": "EggBase",
            "label": "egg",
            "type": "t_mapping(t_uint256,t_struct(Egg)13430_storage)",
            "src": "contracts/NFTs/EggBase.sol:8"
          },
          {
            "contract": "EggBase",
            "label": "hatchTime",
            "type": "t_uint256",
            "src": "contracts/NFTs/EggBase.sol:10"
          },
          {
            "contract": "EggBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggBase.sol:116"
          },
          {
            "contract": "EggNft",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)14935",
            "src": "contracts/NFTs/EggNft.sol:18"
          },
          {
            "contract": "EggNft",
            "label": "brooderContract",
            "type": "t_contract(BrooderNft)13161",
            "src": "contracts/NFTs/EggNft.sol:19"
          },
          {
            "contract": "EggNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggNft.sol:164"
          }
        ],
        "types": {
          "t_contract(MafagafoAvatarNft)14935": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(BrooderNft)13161": {
            "label": "contract BrooderNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Egg)13430_storage)": {
            "label": "mapping(uint256 => struct EggBase.Egg)"
          },
          "t_struct(Egg)13430_storage": {
            "label": "struct EggBase.Egg",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "hatchDate",
                "type": "t_uint256"
              },
              {
                "label": "breeding",
                "type": "t_bool"
              },
              {
                "label": "brooderType",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)15103_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)15103_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)15103_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "2965d1795ba718bec7079e89a55e01526ac65bfc8758c24bc5c55acf9f3fd57b": {
      "address": "0xbB9246e7A7A18205D7af0bAE874F3Dc22707672F",
      "txHash": "0xab15e7ffe521519ed097237498b56aa569734e1fd5c6f83c828c586c973c7bda",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)15210_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:121"
          },
          {
            "contract": "EggBase",
            "label": "egg",
            "type": "t_mapping(t_uint256,t_struct(Egg)13430_storage)",
            "src": "contracts/NFTs/EggBase.sol:8"
          },
          {
            "contract": "EggBase",
            "label": "hatchTime",
            "type": "t_uint256",
            "src": "contracts/NFTs/EggBase.sol:10"
          },
          {
            "contract": "EggBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggBase.sol:116"
          },
          {
            "contract": "EggNft",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)15045",
            "src": "contracts/NFTs/EggNft.sol:18"
          },
          {
            "contract": "EggNft",
            "label": "brooderContract",
            "type": "t_contract(BrooderNft)13161",
            "src": "contracts/NFTs/EggNft.sol:19"
          },
          {
            "contract": "EggNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggNft.sol:177"
          }
        ],
        "types": {
          "t_contract(MafagafoAvatarNft)15045": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(BrooderNft)13161": {
            "label": "contract BrooderNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Egg)13430_storage)": {
            "label": "mapping(uint256 => struct EggBase.Egg)"
          },
          "t_struct(Egg)13430_storage": {
            "label": "struct EggBase.Egg",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "hatchDate",
                "type": "t_uint256"
              },
              {
                "label": "breeding",
                "type": "t_bool"
              },
              {
                "label": "brooderType",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)15210_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)15210_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)15210_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "99bc65f5382c8e9893712dcce85a5a8bf8f6a3a8fc4b73eb459b7ab00a31fa81": {
      "address": "0xB1d13615CFc7bCAA8c6c05D2C489e8c918D6bD4F",
      "txHash": "0xcd31eff4019fe2ec5d1c66a6efdef1f734a636d6bbc0c3453c8ea150fbb1e042",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:168"
          },
          {
            "contract": "MafaBox",
            "label": "_totalOpen",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/MafaBox.sol:17"
          },
          {
            "contract": "MafaBox",
            "label": "probabilities",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NFTs/MafaBox.sol:18"
          },
          {
            "contract": "MafaBox",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)15094",
            "src": "contracts/NFTs/MafaBox.sol:20"
          },
          {
            "contract": "MafaBox",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafaBox.sol:129"
          }
        ],
        "types": {
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(MafagafoAvatarNft)15094": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "f5ca9d53db2d15f8887f08af87170d11b6e12cebf9052f6df89c9980a69e7b62": {
      "address": "0x7426962BE4382A353E12aafB800ce4b691c9BA5F",
      "txHash": "0xbfe096a656f33cd17ef255f703e6f09a0ff757ff409f1d3726340a773e5ae057",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)15137_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:121"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)14425_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:119"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)14038",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "mafaVersion",
            "type": "t_uint16",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:21"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:144"
          }
        ],
        "types": {
          "t_contract(EggNft)14038": {
            "label": "contract EggNft"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)14425_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)14425_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "flags",
                "type": "t_uint32"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)15137_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)15137_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)15137_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "c28adc18cf0c1114313b59657850ed3e0d21c27c99398dfa5320cbe389a8b87f": {
      "address": "0xc9361dC20b8479F97f391072433A9325c53f5cd8",
      "txHash": "0xa16070570ab0d861f825c8b57a4db2de8e8e5189148674a7f843047563a00384",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)15137_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:121"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)14425_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:119"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)14038",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "mafaVersion",
            "type": "t_uint16",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:21"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:144"
          }
        ],
        "types": {
          "t_contract(EggNft)14038": {
            "label": "contract EggNft"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)14425_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)14425_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "flags",
                "type": "t_uint32"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)15137_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)15137_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)15137_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "c8418aa9d1702d8a4b0c9a3fc9da586977029e1a65be50780810dcd24914b59c": {
      "address": "0xe8B6eCF893e33860B3204eAc7c08E8Fd8a6BB469",
      "txHash": "0xab303d8093390aeb0b093f6bae7330f769382e57baf5bc6c7357d1568e00655b",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)15140_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:121"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)14425_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:119"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)14038",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "mafaVersion",
            "type": "t_uint16",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:21"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:144"
          }
        ],
        "types": {
          "t_contract(EggNft)14038": {
            "label": "contract EggNft"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)14425_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)14425_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "flags",
                "type": "t_uint32"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)15140_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)15140_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)15140_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "fac8b5339d14d9d0a8a89b1d723608335467d9f3e4920523c6d790e6d2f4f677": {
      "address": "0xa9aC8234c8720Fd8DEaD27CD46fe8DA314A6d8D0",
      "txHash": "0xac082a66ec59e9c090b1cf5deb2a2ae1a5c601e1875887e7b52c6498e15d083e",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)15151_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:121"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)14433_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:119"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)14038",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "mafaVersion",
            "type": "t_uint16",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:21"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:144"
          }
        ],
        "types": {
          "t_contract(EggNft)14038": {
            "label": "contract EggNft"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)14433_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)14433_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "flags",
                "type": "t_uint32"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)15151_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)15151_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)15151_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "5b4a5a1e49e59401374e34fc223755c8d77dc75eac5c67861a336baee89787e4": {
      "address": "0x16aFa2453f49C94CB6958cc48a064432c8B4B26c",
      "txHash": "0x266d64977574d35ce698bf33ae42d1fdb3e204bb5d3b48d7bf5450e3add5870b",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)15223_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:121"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)14389_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:141"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)14038",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "mafaVersion",
            "type": "t_uint16",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:21"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:144"
          }
        ],
        "types": {
          "t_contract(EggNft)14038": {
            "label": "contract EggNft"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)14389_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)14389_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "flags",
                "type": "t_uint32"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)15223_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)15223_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)15223_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "2ad1371d41da7edda8bf1d75b7f2a0908431f69e84c175ca23b321c84224d476": {
      "address": "0x3bD7eA9e882B8dfE1e2f3559906c081b4265DED4",
      "txHash": "0x0cfa035b39c56ad52816e2228bb6581917b9279480af5ff99b02b4c3c752256f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:168"
          },
          {
            "contract": "MafaBox",
            "label": "_totalOpen",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/MafaBox.sol:17"
          },
          {
            "contract": "MafaBox",
            "label": "probabilities",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NFTs/MafaBox.sol:18"
          },
          {
            "contract": "MafaBox",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)15047",
            "src": "contracts/NFTs/MafaBox.sol:20"
          },
          {
            "contract": "MafaBox",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafaBox.sol:119"
          }
        ],
        "types": {
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(MafagafoAvatarNft)15047": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "a38d40249030515305ccfb029f904f1470148a6b0558144c65f93f57c6995cd1": {
      "address": "0xfe6E12471F80F9264D7C9C04b8376653AD87f2c4",
      "txHash": "0x3b85f8b929dc7475940924139a3410ccd1dd8a9767497bf51b517646e2a6b6ca",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)15266_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:121"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)14374_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:141"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)14025",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "mafaVersion",
            "type": "t_uint16",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:21"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:164"
          }
        ],
        "types": {
          "t_contract(EggNft)14025": {
            "label": "contract EggNft"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)14374_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)14374_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "flags",
                "type": "t_uint32"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)15266_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)15266_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)15266_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "931cdbeb61c3e9aa7e7ca5f387316e36a2c223ec62a6884b17dfc7a588ec4097": {
      "address": "0xbA0468B96D1425C301A9E82A5bC452324d56A3F9",
      "txHash": "0x5217c716ceaf81e4e4f029896b43aa7788b7efa779e4456b01d9b13e3dd587af",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:167"
          },
          {
            "contract": "MafaBox",
            "label": "_totalOpen",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/MafaBox.sol:17"
          },
          {
            "contract": "MafaBox",
            "label": "probabilities",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NFTs/MafaBox.sol:18"
          },
          {
            "contract": "MafaBox",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)15093",
            "src": "contracts/NFTs/MafaBox.sol:20"
          },
          {
            "contract": "MafaBox",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafaBox.sol:114"
          }
        ],
        "types": {
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(MafagafoAvatarNft)15093": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "602e5909cbb1286cde417f73aedb0ab1cd29c148495be24e12b3928b16142c9a": {
      "address": "0x4E04D500F83cD8EBc735cAcE9A8319C2A9bF303b",
      "txHash": "0x9b3d0e02d66b6475bedde113242492ded4d6450d83877dafa320a048ecdc0361",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)15327_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:121"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)14485_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:141"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)14143",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "mafaVersion",
            "type": "t_uint16",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:21"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:145"
          }
        ],
        "types": {
          "t_contract(EggNft)14143": {
            "label": "contract EggNft"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)14485_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)14485_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "flags",
                "type": "t_uint32"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)15327_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)15327_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)15327_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "104a299305e66ca42bd7d7230b9ee61b10b35dc93e4caef343ed9821b52b8342": {
      "address": "0xd5fb0b93B7af3464c1C61f466eBD975db8b34ac4",
      "txHash": "0x5b380475194fc5078ecf313c55c26330b4781472f95c94a4c1cd2677fbc372db",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:167"
          },
          {
            "contract": "MafaBox",
            "label": "_totalOpen",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/MafaBox.sol:17"
          },
          {
            "contract": "MafaBox",
            "label": "probabilities",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NFTs/MafaBox.sol:18"
          },
          {
            "contract": "MafaBox",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)15054",
            "src": "contracts/NFTs/MafaBox.sol:20"
          },
          {
            "contract": "MafaBox",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafaBox.sol:117"
          }
        ],
        "types": {
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(MafagafoAvatarNft)15054": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "8cf4aeb58e5e16c7ab32e8e86b39f0a30382df04744d79ab84870e42e60265bd": {
      "address": "0xEE6B4EC74c970DA3Bb8328Df0852a59405E0B196",
      "txHash": "0xb0f0954b7485f387680ad55939eaa93679d184d94dbb13aadd078a491a844446",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:167"
          },
          {
            "contract": "MafaBox",
            "label": "_totalOpen",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/MafaBox.sol:17"
          },
          {
            "contract": "MafaBox",
            "label": "probabilities",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NFTs/MafaBox.sol:18"
          },
          {
            "contract": "MafaBox",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)17215",
            "src": "contracts/NFTs/MafaBox.sol:20"
          },
          {
            "contract": "MafaBox",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafaBox.sol:119"
          }
        ],
        "types": {
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(MafagafoAvatarNft)17215": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "9c0faec44a7b67e56736738367e9ad2d4836886048274a9205abe0fdd2bb2dd3": {
      "address": "0x6463093A958BE7F84E03E180F5A48E5a67428373",
      "txHash": "0x8f6e3178638efc517dc18dd0f58d1cb35f846dcaeba657b6575a757ac40d4e9c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:167"
          },
          {
            "contract": "BrooderNft",
            "label": "brooder",
            "type": "t_mapping(t_uint256,t_struct(Brooder)13062_storage)",
            "src": "contracts/NFTs/BrooderNft.sol:20"
          },
          {
            "contract": "BrooderNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BrooderNft.sol:59"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Brooder)13062_storage)": {
            "label": "mapping(uint256 => struct BrooderNft.Brooder)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Brooder)13062_storage": {
            "label": "struct BrooderNft.Brooder",
            "members": [
              {
                "label": "breedTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "01a043ea7f85a0a04996b59601df9175b177b1224b93d291effbb6a19556e6db": {
      "address": "0xb0fa6b34ace40cB92e8968a133Ed25FcBa9d8a11",
      "txHash": "0x3983aed05e2db50b51c98ff7f56b0174494f5efeeb4f5c8563f4ef1436082741",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)15209_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:121"
          },
          {
            "contract": "EggBase",
            "label": "egg",
            "type": "t_mapping(t_uint256,t_struct(Egg)13417_storage)",
            "src": "contracts/NFTs/EggBase.sol:8"
          },
          {
            "contract": "EggBase",
            "label": "hatchTime",
            "type": "t_uint256",
            "src": "contracts/NFTs/EggBase.sol:10"
          },
          {
            "contract": "EggBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggBase.sol:116"
          },
          {
            "contract": "EggNft",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)15044",
            "src": "contracts/NFTs/EggNft.sol:18"
          },
          {
            "contract": "EggNft",
            "label": "brooderContract",
            "type": "t_contract(BrooderNft)13148",
            "src": "contracts/NFTs/EggNft.sol:19"
          },
          {
            "contract": "EggNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggNft.sol:177"
          }
        ],
        "types": {
          "t_contract(MafagafoAvatarNft)15044": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(BrooderNft)13148": {
            "label": "contract BrooderNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Egg)13417_storage)": {
            "label": "mapping(uint256 => struct EggBase.Egg)"
          },
          "t_struct(Egg)13417_storage": {
            "label": "struct EggBase.Egg",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "hatchDate",
                "type": "t_uint256"
              },
              {
                "label": "breeding",
                "type": "t_bool"
              },
              {
                "label": "brooderType",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)15209_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)15209_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)15209_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "e314e1970ca25214343516a5d153e42575e8ed9adcbf78b5c563633051e1e3b5": {
      "address": "0x976620E3F20e6F10c9a71F8C551bfea2d76EFCd7",
      "txHash": "0x66ac0e64e5e06c6fd92b517e22a8e9d6124c5f01c904493f1041c8e8e34db178",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:44"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)15070",
            "src": "contracts/DirectSale/MafaStore.sol:45"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:47"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:48"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9965_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:484"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)15070": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9965_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9965_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5440c01bb492aa028a474a0569dd2db9e239a3ae5338dc88dc19d0eebc86850a": {
      "address": "0xc41927DEE70E2198F7dA613d5D20E3F1b6293Fdc",
      "txHash": "0x6c02a52dff5616f8b8f4cf51f04830d3a1ccf8f82fdb76273d6ba2e6fce09ef9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:45"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)15154",
            "src": "contracts/DirectSale/MafaStore.sol:46"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:48"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:49"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9966_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:52"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:55"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:511"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)15154": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9966_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9966_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "06070d6ff7a90f5ba444a81a7dbbb1e26f903b9b375238991a60a5437f473c41": {
      "address": "0xF8185a459a94dcF9213AA091e00AB5BD9f4DACEe",
      "txHash": "0xf6fbb59e4d4f4dd4952877fad24e77e8b204e641882f1c46b05adba05ea6bd80",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:45"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)16871",
            "src": "contracts/DirectSale/MafaStore.sol:46"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:48"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:49"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9966_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:52"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:55"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:512"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)16871": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9966_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9966_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "f80da44f6cd44ca1cf206a9c132ed7797559f361ed9fdf88014dad45d378e75d": {
      "address": "0x18F6C808935Ad4a434933dEFeBc9fd34FB54E2B7",
      "txHash": "0x7b21a671a2e4b5faa7a8bc95352135fa2de33046c1177b378eaf1822b71e5be1",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)16996_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:167"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)15979_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:162"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)15637",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "mafaVersion",
            "type": "t_uint16",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:21"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:174"
          }
        ],
        "types": {
          "t_contract(EggNft)15637": {
            "label": "contract EggNft"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)15979_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)15979_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "flags",
                "type": "t_uint32"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)16996_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)16996_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)16996_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "bc1fc718dbc39025ce1c857aef3dd6bcd631b7670cfd5c8948919f81eecc1c86": {
      "address": "0x47043dA57c417410fEC22a5388C2a8c297B83a08",
      "txHash": "0xd6e82d79f1bf450830b974b548bf3fc1fe4ce52aeb30113283617b591bc3ae1a",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)15873_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:167"
          },
          {
            "contract": "EggBase",
            "label": "egg",
            "type": "t_mapping(t_uint256,t_struct(Egg)13906_storage)",
            "src": "contracts/NFTs/EggBase.sol:8"
          },
          {
            "contract": "EggBase",
            "label": "hatchTime",
            "type": "t_uint256",
            "src": "contracts/NFTs/EggBase.sol:10"
          },
          {
            "contract": "EggBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggBase.sol:116"
          },
          {
            "contract": "EggNft",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)15708",
            "src": "contracts/NFTs/EggNft.sol:18"
          },
          {
            "contract": "EggNft",
            "label": "brooderContract",
            "type": "t_contract(BrooderNft)13637",
            "src": "contracts/NFTs/EggNft.sol:19"
          },
          {
            "contract": "EggNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggNft.sol:177"
          }
        ],
        "types": {
          "t_contract(MafagafoAvatarNft)15708": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(BrooderNft)13637": {
            "label": "contract BrooderNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Egg)13906_storage)": {
            "label": "mapping(uint256 => struct EggBase.Egg)"
          },
          "t_struct(Egg)13906_storage": {
            "label": "struct EggBase.Egg",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "hatchDate",
                "type": "t_uint256"
              },
              {
                "label": "breeding",
                "type": "t_bool"
              },
              {
                "label": "brooderType",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)15873_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)15873_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)15873_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "41cf3ab2817a6d0c62dd0684b9a1d0370abf0619741cef67c15b3a450bf8b957": {
      "address": "0x5De840f41E09611b37895BB7572bC1e729Eb49E3",
      "txHash": "0x83af049bdb70e89aa81bf55ca5ffa0c61554123503a46330321402c2bb35a159",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)17036_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:167"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "mafagafo",
            "type": "t_mapping(t_uint256,t_struct(Mafagafo)15979_storage)",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:8"
          },
          {
            "contract": "MafagafoAvatarBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarBase.sol:162"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "eggContract",
            "type": "t_contract(EggNft)15637",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:19"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "mafaVersion",
            "type": "t_uint16",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:21"
          },
          {
            "contract": "MafagafoAvatarNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafagafoAvatarNft.sol:192"
          }
        ],
        "types": {
          "t_contract(EggNft)15637": {
            "label": "contract EggNft"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Mafagafo)15979_storage)": {
            "label": "mapping(uint256 => struct MafagafoAvatarBase.Mafagafo)"
          },
          "t_struct(Mafagafo)15979_storage": {
            "label": "struct MafagafoAvatarBase.Mafagafo",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "flags",
                "type": "t_uint32"
              },
              {
                "label": "birthTime",
                "type": "t_uint64"
              },
              {
                "label": "cooldown",
                "type": "t_uint64"
              },
              {
                "label": "matings",
                "type": "t_uint256"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)17036_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)17036_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)17036_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "a1afc4412f1cd38ac576d0e3c6828d8dd170fa8a7a471eb243fcf50f26f58634": {
      "address": "0xEA6B978b5467E285cf3ab60aF83a08a664A80C1e",
      "txHash": "0x3957f4410d2df6f3ae5d57248d0266bd9472430816d37b457acb86675cd90a29",
      "layout": {
        "storage": [
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)17036_storage)dyn_storage)",
            "src": "contracts/NFTs/rarible/AbstractRoyalties.sol:8"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:43"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:45"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "contracts/NFTs/ERC721PresetMinterPauserAutoIdUpgradeable.sol:157"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseNft.sol:167"
          },
          {
            "contract": "EggBase",
            "label": "egg",
            "type": "t_mapping(t_uint256,t_struct(Egg)15021_storage)",
            "src": "contracts/NFTs/EggBase.sol:8"
          },
          {
            "contract": "EggBase",
            "label": "hatchTime",
            "type": "t_uint256",
            "src": "contracts/NFTs/EggBase.sol:10"
          },
          {
            "contract": "EggBase",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggBase.sol:116"
          },
          {
            "contract": "EggNft",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)16871",
            "src": "contracts/NFTs/EggNft.sol:18"
          },
          {
            "contract": "EggNft",
            "label": "brooderContract",
            "type": "t_contract(BrooderNft)14752",
            "src": "contracts/NFTs/EggNft.sol:19"
          },
          {
            "contract": "EggNft",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/EggNft.sol:179"
          }
        ],
        "types": {
          "t_contract(MafagafoAvatarNft)16871": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(BrooderNft)14752": {
            "label": "contract BrooderNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Egg)15021_storage)": {
            "label": "mapping(uint256 => struct EggBase.Egg)"
          },
          "t_struct(Egg)15021_storage": {
            "label": "struct EggBase.Egg",
            "members": [
              {
                "label": "version",
                "type": "t_uint16"
              },
              {
                "label": "genes",
                "type": "t_bytes32"
              },
              {
                "label": "generation",
                "type": "t_uint32"
              },
              {
                "label": "parent1Id",
                "type": "t_uint256"
              },
              {
                "label": "parent2Id",
                "type": "t_uint256"
              },
              {
                "label": "hatchDate",
                "type": "t_uint256"
              },
              {
                "label": "breeding",
                "type": "t_bool"
              },
              {
                "label": "brooderType",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)6195_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)6195_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)5894_storage"
              }
            ]
          },
          "t_struct(Set)5894_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)17036_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)17036_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)17036_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          }
        }
      }
    },
    "7f7e6b35c88436f51b50cf3d5830d4dec7676f83c0865e53d8c7fe4a481fdf6b": {
      "address": "0x8800cc3F3CBdbEEf1fB7F6e3742040C9a9275D20",
      "txHash": "0xebd3a8a8acff495a00686971737f30385287c01ebaf27dcdb5293c6c5a3f5703",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:50"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)17027",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:53"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9966_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:57"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:60"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:553"
          },
          {
            "contract": "MafaStore",
            "label": "dailyVolumes",
            "type": "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)",
            "src": "contracts/DirectSale/MafaStore.sol:555"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)17027": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9966_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9966_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)": {
            "label": "mapping(address => struct MafaStore.SellVolume[])"
          },
          "t_array(t_struct(SellVolume)9971_storage)dyn_storage": {
            "label": "struct MafaStore.SellVolume[]"
          },
          "t_struct(SellVolume)9971_storage": {
            "label": "struct MafaStore.SellVolume",
            "members": [
              {
                "label": "date",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "28b5d901081bad43ab3202a8c790399f50775f85a0df227af4f8a1bee94390a9": {
      "address": "0xdD7C25501F96A05f4EEDC516cD2F11a5761769c2",
      "txHash": "0xdc631f599ca7ad215ffe0043813021d54b1b7eeee2e7790f9a7210da33a2f249",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:50"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)17011",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:53"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9966_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:57"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:60"
          },
          {
            "contract": "MafaStore",
            "label": "dailyVolumes",
            "type": "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)",
            "src": "contracts/DirectSale/MafaStore.sol:548"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:550"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)17011": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9966_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9966_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)": {
            "label": "mapping(address => struct MafaStore.SellVolume[])"
          },
          "t_array(t_struct(SellVolume)9971_storage)dyn_storage": {
            "label": "struct MafaStore.SellVolume[]"
          },
          "t_struct(SellVolume)9971_storage": {
            "label": "struct MafaStore.SellVolume",
            "members": [
              {
                "label": "date",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "57bf37dcab86a29c9a405c73289857612bfd8ad0209b6d027fb6c09eea5287b0": {
      "address": "0xD1B15bcd2D0cbBbE98D2286A6e917D96fbd8d3e6",
      "txHash": "0x794af36858360a1811267193341503e5725fe1f5a4cde5adc04b28205aefc237",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:50"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)17013",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:53"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9966_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:57"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:60"
          },
          {
            "contract": "MafaStore",
            "label": "dailyVolumes",
            "type": "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)",
            "src": "contracts/DirectSale/MafaStore.sol:548"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:550"
          },
          {
            "contract": "MafaStore",
            "label": "addressQualquer",
            "type": "t_address",
            "src": "contracts/DirectSale/MafaStore.sol:552"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)17013": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9966_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9966_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)": {
            "label": "mapping(address => struct MafaStore.SellVolume[])"
          },
          "t_array(t_struct(SellVolume)9971_storage)dyn_storage": {
            "label": "struct MafaStore.SellVolume[]"
          },
          "t_struct(SellVolume)9971_storage": {
            "label": "struct MafaStore.SellVolume",
            "members": [
              {
                "label": "date",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "8016031f809eeb40222df7e05c7317fdf8102f009df176d92be3cf42042810de": {
      "address": "0xdE11A540AD2147A9657BbD56cD91b0C02e1B1d90",
      "txHash": "0xec933269d651fd45c400f1e7ee934b353b800bdd2238b3a30333673545af5968",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:50"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)17017",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:53"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9966_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:57"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:60"
          },
          {
            "contract": "MafaStore",
            "label": "dailyVolumes",
            "type": "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)",
            "src": "contracts/DirectSale/MafaStore.sol:548"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:550"
          },
          {
            "contract": "MafaStore",
            "label": "addressQualquer",
            "type": "t_address",
            "src": "contracts/DirectSale/MafaStore.sol:552"
          },
          {
            "contract": "MafaStore",
            "label": "numberQualquer",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:554"
          },
          {
            "contract": "MafaStore",
            "label": "everdad",
            "type": "t_bool",
            "src": "contracts/DirectSale/MafaStore.sol:556"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)17017": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9966_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9966_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)": {
            "label": "mapping(address => struct MafaStore.SellVolume[])"
          },
          "t_array(t_struct(SellVolume)9971_storage)dyn_storage": {
            "label": "struct MafaStore.SellVolume[]"
          },
          "t_struct(SellVolume)9971_storage": {
            "label": "struct MafaStore.SellVolume",
            "members": [
              {
                "label": "date",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "362463f1e654b5b43334d0c5d203254d8d67e42812c328d74158ae637fa49f28": {
      "address": "0xbCB4e7B0B70CffC8a04547504d528F2581792091",
      "txHash": "0x25b64e681032b4eb42be3832004951a39478225e7ba32259790df12e2510e888",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:50"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)17011",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:53"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9966_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:57"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:60"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:548"
          },
          {
            "contract": "MafaStore",
            "label": "dailyVolumes",
            "type": "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)",
            "src": "contracts/DirectSale/MafaStore.sol:550"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)17011": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9966_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9966_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)": {
            "label": "mapping(address => struct MafaStore.SellVolume[])"
          },
          "t_array(t_struct(SellVolume)9971_storage)dyn_storage": {
            "label": "struct MafaStore.SellVolume[]"
          },
          "t_struct(SellVolume)9971_storage": {
            "label": "struct MafaStore.SellVolume",
            "members": [
              {
                "label": "date",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "b27fc06bb771338df2cc36d23963448b25cc8f209ee8ce4f44ae2c290f2c0cc4": {
      "address": "0x8083d73b25BD05Ac335E7d13B7AD8559c671a1cf",
      "txHash": "0xf0a48c8e8807518892a8e4c3b8b9522164a6c8353d025199e4769c996b363e0c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:50"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)17024",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:53"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9966_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:57"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:60"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:551"
          },
          {
            "contract": "MafaStore",
            "label": "dailyVolumes",
            "type": "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)",
            "src": "contracts/DirectSale/MafaStore.sol:553"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)17024": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9966_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9966_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)": {
            "label": "mapping(address => struct MafaStore.SellVolume[])"
          },
          "t_array(t_struct(SellVolume)9971_storage)dyn_storage": {
            "label": "struct MafaStore.SellVolume[]"
          },
          "t_struct(SellVolume)9971_storage": {
            "label": "struct MafaStore.SellVolume",
            "members": [
              {
                "label": "date",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5e335f6e222f552a939e4283cd3cfb73c690245cf1516484546f433cec9e05dc": {
      "address": "0x90605328DCF6faAEaF0356aaa019ef0255fD1848",
      "txHash": "0x55b72d19f8cfd27c7a6d9d218bf6fb7dbd9121b35bb3ee84a4162a47d504d864",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:50"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)17069",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:53"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9966_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:57"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:60"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:562"
          },
          {
            "contract": "MafaStore",
            "label": "dailyVolumes",
            "type": "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)",
            "src": "contracts/DirectSale/MafaStore.sol:564"
          },
          {
            "contract": "MafaStore",
            "label": "dailySellPercentage",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:566"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)17069": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9966_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9966_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)": {
            "label": "mapping(address => struct MafaStore.SellVolume[])"
          },
          "t_array(t_struct(SellVolume)9971_storage)dyn_storage": {
            "label": "struct MafaStore.SellVolume[]"
          },
          "t_struct(SellVolume)9971_storage": {
            "label": "struct MafaStore.SellVolume",
            "members": [
              {
                "label": "date",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "c4191f2507cf674b3ddb579555c532912fb82e997456aa9accca9ab313a4262b": {
      "address": "0x40E6ba206B2eb899eDEc79F5Ef5b0C5D87c4C1A5",
      "txHash": "0x28ae4126f620a6d5d6075faeadb5e6cf6dd643d6f160e2af0e37782604fed333",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:50"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)17061",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:53"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9966_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:57"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:60"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:561"
          },
          {
            "contract": "MafaStore",
            "label": "dailyVolumes",
            "type": "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)",
            "src": "contracts/DirectSale/MafaStore.sol:563"
          },
          {
            "contract": "MafaStore",
            "label": "dailySellPercentage",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:565"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)17061": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9966_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9966_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)": {
            "label": "mapping(address => struct MafaStore.SellVolume[])"
          },
          "t_array(t_struct(SellVolume)9971_storage)dyn_storage": {
            "label": "struct MafaStore.SellVolume[]"
          },
          "t_struct(SellVolume)9971_storage": {
            "label": "struct MafaStore.SellVolume",
            "members": [
              {
                "label": "date",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "7cca767f8ebb1eb9dcba4846416ac10d1ab7f59a156f381437e216246b989f79": {
      "address": "0xe69D64fa3b9ac07627F294cB7191337e6A26c074",
      "txHash": "0x194e798f8f6de96429c7062c732a971680fce4d72d6ba4dd928d5667b99a58d5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "MafaStore",
            "label": "acceptedToken",
            "type": "t_contract(IERC20)7333",
            "src": "contracts/DirectSale/MafaStore.sol:50"
          },
          {
            "contract": "MafaStore",
            "label": "avatarContract",
            "type": "t_contract(MafagafoAvatarNft)17066",
            "src": "contracts/DirectSale/MafaStore.sol:51"
          },
          {
            "contract": "MafaStore",
            "label": "_mafaBnbPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:53"
          },
          {
            "contract": "MafaStore",
            "label": "_bnbBusdPair",
            "type": "t_contract(IUniswapV2Pair)9525",
            "src": "contracts/DirectSale/MafaStore.sol:54"
          },
          {
            "contract": "MafaStore",
            "label": "items",
            "type": "t_array(t_struct(Item)9966_storage)dyn_storage",
            "src": "contracts/DirectSale/MafaStore.sol:57"
          },
          {
            "contract": "MafaStore",
            "label": "avatarPrice",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:60"
          },
          {
            "contract": "MafaStore",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/DirectSale/MafaStore.sol:565"
          },
          {
            "contract": "MafaStore",
            "label": "dailyVolumes",
            "type": "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)",
            "src": "contracts/DirectSale/MafaStore.sol:567"
          },
          {
            "contract": "MafaStore",
            "label": "dailySellPercentage",
            "type": "t_uint256",
            "src": "contracts/DirectSale/MafaStore.sol:569"
          }
        ],
        "types": {
          "t_contract(IERC20)7333": {
            "label": "contract IERC20"
          },
          "t_contract(MafagafoAvatarNft)17066": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_contract(IUniswapV2Pair)9525": {
            "label": "contract IUniswapV2Pair"
          },
          "t_array(t_struct(Item)9966_storage)dyn_storage": {
            "label": "struct MafaStore.Item[]"
          },
          "t_struct(Item)9966_storage": {
            "label": "struct MafaStore.Item",
            "members": [
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "title",
                "type": "t_bytes32"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_array(t_struct(SellVolume)9971_storage)dyn_storage)": {
            "label": "mapping(address => struct MafaStore.SellVolume[])"
          },
          "t_array(t_struct(SellVolume)9971_storage)dyn_storage": {
            "label": "struct MafaStore.SellVolume[]"
          },
          "t_struct(SellVolume)9971_storage": {
            "label": "struct MafaStore.SellVolume",
            "members": [
              {
                "label": "date",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "72911cff16c72d9fa2a84038edf501996ad9b865d5c1c8344889ce3aac27363c": {
      "address": "0x97fCB0e0055C0c95C9Af3E59c91070531226b76f",
      "txHash": "0xf7929385b4b120786b6442f8b0aa039beac3adbc177900beab68b255be5b4c4f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:49"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:26"
          },
          {
            "contract": "ERC1155SupplyUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol:67"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "BaseERC1155",
            "label": "_uris",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/NFTs/BaseERC1155.sol:27"
          },
          {
            "contract": "BaseERC1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/BaseERC1155.sol:167"
          },
          {
            "contract": "MafaBox",
            "label": "_totalOpen",
            "type": "t_struct(Counter)5094_storage",
            "src": "contracts/NFTs/MafaBox.sol:17"
          },
          {
            "contract": "MafaBox",
            "label": "probabilities",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NFTs/MafaBox.sol:18"
          },
          {
            "contract": "MafaBox",
            "label": "mafagafoContract",
            "type": "t_contract(MafagafoAvatarNft)17250",
            "src": "contracts/NFTs/MafaBox.sol:20"
          },
          {
            "contract": "MafaBox",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/NFTs/MafaBox.sol:125"
          }
        ],
        "types": {
          "t_struct(Counter)5094_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(MafagafoAvatarNft)17250": {
            "label": "contract MafagafoAvatarNft"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          }
        }
      }
    },
    "4ee9731cf1bbf84bea06c3d06736389f2e56681d4cc2c7164a88ed721eafc830": {
      "address": "0x45F4c9F32882df60c8709B36b9AD77bb5663a79C",
      "txHash": "0x41d257dc8f1ed1d6ffc9a01c4672d7f1398206a7d0479cc8f5343d913cec2cde",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1967UpgradeUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UUPSUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "201",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "251",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "WithdrawableOwnableUpgradeable",
            "src": "contracts/utils/WithdrawableOwnableUpgradeable.sol:112"
          },
          {
            "label": "mafagafoContract",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(MafagafoAvatarNft)18487",
            "contract": "Burner",
            "src": "contracts/MafagoldAction/Burner.sol:16"
          },
          {
            "label": "totalMinted",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "Burner",
            "src": "contracts/MafagoldAction/Burner.sol:19"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "353",
            "type": "t_array(t_uint256)50_storage",
            "contract": "Burner",
            "src": "contracts/MafagoldAction/Burner.sol:125"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(MafagafoAvatarNft)18487": {
            "label": "contract MafagafoAvatarNft",
            "numberOfBytes": "20"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "151bd95de90464048be5851de1ac962a23e6a70e55902f3d2c5b07749d04b6c9": {
      "address": "0xd0BA6604A4312F8C0D58406f91E32CdB891156Ed",
      "txHash": "0x4e5cccdf7f7a2138615c2c61c8e21498380f935712c62751cb10b36d029e423c",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1967UpgradeUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UUPSUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "201",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "251",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "WithdrawableOwnableUpgradeable",
            "src": "contracts/utils/WithdrawableOwnableUpgradeable.sol:112"
          },
          {
            "label": "mafagafoContract",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(MafagafoAvatarNft)18487",
            "contract": "Burner",
            "src": "contracts/MafagoldAction/Burner.sol:16"
          },
          {
            "label": "totalMinted",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "Burner",
            "src": "contracts/MafagoldAction/Burner.sol:19"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "353",
            "type": "t_array(t_uint256)50_storage",
            "contract": "Burner",
            "src": "contracts/MafagoldAction/Burner.sol:125"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(MafagafoAvatarNft)18487": {
            "label": "contract MafagafoAvatarNft",
            "numberOfBytes": "20"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
