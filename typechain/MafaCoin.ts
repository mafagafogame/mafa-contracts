/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MafaCoinInterface extends utils.Interface {
  functions: {
    "MAX_BUY_FEE()": FunctionFragment;
    "MAX_SELL_FEE()": FunctionFragment;
    "MIN_ANTI_DUMP_LIMIT()": FunctionFragment;
    "MIN_TAKE_FEE()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "automatedMarketMakerPairs(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "developmentAddress()": FunctionFragment;
    "developmentBuyFee()": FunctionFragment;
    "developmentSellFee()": FunctionFragment;
    "dexPair()": FunctionFragment;
    "dexRouter()": FunctionFragment;
    "excludeFromFees(address)": FunctionFragment;
    "includeInFees(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFees(address)": FunctionFragment;
    "liquidityAddress()": FunctionFragment;
    "liquidityBuyFee()": FunctionFragment;
    "liquiditySellFee()": FunctionFragment;
    "marketingAddress()": FunctionFragment;
    "marketingBuyFee()": FunctionFragment;
    "marketingSellFee()": FunctionFragment;
    "maxSellAmount()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAutomatedMarketMakerPair(address,bool)": FunctionFragment;
    "setDevelopmentAddress(address)": FunctionFragment;
    "setDevelopmentBuyFee(uint256)": FunctionFragment;
    "setDevelopmentSellFee(uint256)": FunctionFragment;
    "setLiquidityAddress(address)": FunctionFragment;
    "setLiquidityBuyFee(uint256)": FunctionFragment;
    "setLiquiditySellFee(uint256)": FunctionFragment;
    "setMarketingAddress(address)": FunctionFragment;
    "setMarketingBuyFee(uint256)": FunctionFragment;
    "setMarketingSellFee(uint256)": FunctionFragment;
    "setMaxSellAmount(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalBuyFees()": FunctionFragment;
    "totalSellFees()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawERC1155(address,uint256,uint256)": FunctionFragment;
    "withdrawERC20(address,uint256)": FunctionFragment;
    "withdrawERC721(address,uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_BUY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SELL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ANTI_DUMP_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_TAKE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "developmentAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "developmentBuyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "developmentSellFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dexPair", values?: undefined): string;
  encodeFunctionData(functionFragment: "dexRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityBuyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquiditySellFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingBuyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingSellFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSellAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevelopmentAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevelopmentBuyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevelopmentSellFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityBuyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquiditySellFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingBuyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingSellFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSellAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBuyFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSellFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [string, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_BUY_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SELL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ANTI_DUMP_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_TAKE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "developmentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "developmentBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "developmentSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquiditySellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSellAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevelopmentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevelopmentBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevelopmentSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquiditySellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSellAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBuyFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSellFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "DevelopmentAddressUpdated(address)": EventFragment;
    "DevelopmentFeeUpdated(uint256)": EventFragment;
    "ExcludeFromFees(address)": EventFragment;
    "IncludeInFees(address)": EventFragment;
    "LiquidityAddressUpdated(address)": EventFragment;
    "LiquidityFeeUpdated(uint256)": EventFragment;
    "MarketingAddressUpdated(address)": EventFragment;
    "MarketingFeeUpdated(uint256)": EventFragment;
    "MaxSellAmountUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAutomatedMarketMakerPair(address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "WithdrawERC1155(address,uint256,uint256)": EventFragment;
    "WithdrawERC20(address,address,uint256)": EventFragment;
    "WithdrawERC721(address,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DevelopmentAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DevelopmentFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncludeInFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketingAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketingFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxSellAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetAutomatedMarketMakerPair"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawERC1155"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawERC721"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type DevelopmentAddressUpdatedEvent = TypedEvent<
  [string],
  { developmentAddress: string }
>;

export type DevelopmentAddressUpdatedEventFilter =
  TypedEventFilter<DevelopmentAddressUpdatedEvent>;

export type DevelopmentFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  { fee: BigNumber }
>;

export type DevelopmentFeeUpdatedEventFilter =
  TypedEventFilter<DevelopmentFeeUpdatedEvent>;

export type ExcludeFromFeesEvent = TypedEvent<[string], { account: string }>;

export type ExcludeFromFeesEventFilter = TypedEventFilter<ExcludeFromFeesEvent>;

export type IncludeInFeesEvent = TypedEvent<[string], { account: string }>;

export type IncludeInFeesEventFilter = TypedEventFilter<IncludeInFeesEvent>;

export type LiquidityAddressUpdatedEvent = TypedEvent<
  [string],
  { liquidityAddress: string }
>;

export type LiquidityAddressUpdatedEventFilter =
  TypedEventFilter<LiquidityAddressUpdatedEvent>;

export type LiquidityFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  { fee: BigNumber }
>;

export type LiquidityFeeUpdatedEventFilter =
  TypedEventFilter<LiquidityFeeUpdatedEvent>;

export type MarketingAddressUpdatedEvent = TypedEvent<
  [string],
  { marketingAddress: string }
>;

export type MarketingAddressUpdatedEventFilter =
  TypedEventFilter<MarketingAddressUpdatedEvent>;

export type MarketingFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  { fee: BigNumber }
>;

export type MarketingFeeUpdatedEventFilter =
  TypedEventFilter<MarketingFeeUpdatedEvent>;

export type MaxSellAmountUpdatedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type MaxSellAmountUpdatedEventFilter =
  TypedEventFilter<MaxSellAmountUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SetAutomatedMarketMakerPairEvent = TypedEvent<
  [string, boolean],
  { pair: string; value: boolean }
>;

export type SetAutomatedMarketMakerPairEventFilter =
  TypedEventFilter<SetAutomatedMarketMakerPairEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; value: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export type WithdrawERC1155Event = TypedEvent<
  [string, BigNumber, BigNumber],
  { tokenAddress: string; id: BigNumber; amount: BigNumber }
>;

export type WithdrawERC1155EventFilter = TypedEventFilter<WithdrawERC1155Event>;

export type WithdrawERC20Event = TypedEvent<
  [string, string, BigNumber],
  { sender: string; token: string; value: BigNumber }
>;

export type WithdrawERC20EventFilter = TypedEventFilter<WithdrawERC20Event>;

export type WithdrawERC721Event = TypedEvent<
  [string, BigNumber[]],
  { tokenAddress: string; tokenIds: BigNumber[] }
>;

export type WithdrawERC721EventFilter = TypedEventFilter<WithdrawERC721Event>;

export interface MafaCoin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MafaCoinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_BUY_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_SELL_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_ANTI_DUMP_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_TAKE_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    developmentAddress(overrides?: CallOverrides): Promise<[string]>;

    developmentBuyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    developmentSellFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    dexPair(overrides?: CallOverrides): Promise<[string]>;

    dexRouter(overrides?: CallOverrides): Promise<[string]>;

    excludeFromFees(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    includeInFees(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExcludedFromFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidityAddress(overrides?: CallOverrides): Promise<[string]>;

    liquidityBuyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquiditySellFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketingAddress(overrides?: CallOverrides): Promise<[string]>;

    marketingBuyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketingSellFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSellAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevelopmentAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevelopmentBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevelopmentSellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquiditySellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketingAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketingBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketingSellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSellAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalBuyFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSellFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC1155(
      tokenAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_BUY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_SELL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_ANTI_DUMP_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_TAKE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  automatedMarketMakerPairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  developmentAddress(overrides?: CallOverrides): Promise<string>;

  developmentBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

  developmentSellFee(overrides?: CallOverrides): Promise<BigNumber>;

  dexPair(overrides?: CallOverrides): Promise<string>;

  dexRouter(overrides?: CallOverrides): Promise<string>;

  excludeFromFees(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  includeInFees(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExcludedFromFees(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  liquidityAddress(overrides?: CallOverrides): Promise<string>;

  liquidityBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

  liquiditySellFee(overrides?: CallOverrides): Promise<BigNumber>;

  marketingAddress(overrides?: CallOverrides): Promise<string>;

  marketingBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

  marketingSellFee(overrides?: CallOverrides): Promise<BigNumber>;

  maxSellAmount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAutomatedMarketMakerPair(
    pair: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevelopmentAddress(
    newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevelopmentBuyFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevelopmentSellFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityAddress(
    newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityBuyFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquiditySellFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketingAddress(
    newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketingBuyFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketingSellFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSellAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalBuyFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalSellFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC1155(
    tokenAddress: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    tokenAddress: string,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_BUY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SELL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_ANTI_DUMP_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TAKE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    developmentAddress(overrides?: CallOverrides): Promise<string>;

    developmentBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    developmentSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    dexPair(overrides?: CallOverrides): Promise<string>;

    dexRouter(overrides?: CallOverrides): Promise<string>;

    excludeFromFees(account: string, overrides?: CallOverrides): Promise<void>;

    includeInFees(account: string, overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidityAddress(overrides?: CallOverrides): Promise<string>;

    liquidityBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    liquiditySellFee(overrides?: CallOverrides): Promise<BigNumber>;

    marketingAddress(overrides?: CallOverrides): Promise<string>;

    marketingBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    marketingSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxSellAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevelopmentAddress(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevelopmentBuyFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevelopmentSellFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityAddress(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityBuyFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquiditySellFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketingAddress(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketingBuyFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketingSellFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSellAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalBuyFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSellFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawERC1155(
      tokenAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "DevelopmentAddressUpdated(address)"(
      developmentAddress?: string | null
    ): DevelopmentAddressUpdatedEventFilter;
    DevelopmentAddressUpdated(
      developmentAddress?: string | null
    ): DevelopmentAddressUpdatedEventFilter;

    "DevelopmentFeeUpdated(uint256)"(
      fee?: BigNumberish | null
    ): DevelopmentFeeUpdatedEventFilter;
    DevelopmentFeeUpdated(
      fee?: BigNumberish | null
    ): DevelopmentFeeUpdatedEventFilter;

    "ExcludeFromFees(address)"(
      account?: string | null
    ): ExcludeFromFeesEventFilter;
    ExcludeFromFees(account?: string | null): ExcludeFromFeesEventFilter;

    "IncludeInFees(address)"(account?: string | null): IncludeInFeesEventFilter;
    IncludeInFees(account?: string | null): IncludeInFeesEventFilter;

    "LiquidityAddressUpdated(address)"(
      liquidityAddress?: string | null
    ): LiquidityAddressUpdatedEventFilter;
    LiquidityAddressUpdated(
      liquidityAddress?: string | null
    ): LiquidityAddressUpdatedEventFilter;

    "LiquidityFeeUpdated(uint256)"(
      fee?: BigNumberish | null
    ): LiquidityFeeUpdatedEventFilter;
    LiquidityFeeUpdated(
      fee?: BigNumberish | null
    ): LiquidityFeeUpdatedEventFilter;

    "MarketingAddressUpdated(address)"(
      marketingAddress?: string | null
    ): MarketingAddressUpdatedEventFilter;
    MarketingAddressUpdated(
      marketingAddress?: string | null
    ): MarketingAddressUpdatedEventFilter;

    "MarketingFeeUpdated(uint256)"(
      fee?: BigNumberish | null
    ): MarketingFeeUpdatedEventFilter;
    MarketingFeeUpdated(
      fee?: BigNumberish | null
    ): MarketingFeeUpdatedEventFilter;

    "MaxSellAmountUpdated(uint256)"(
      amount?: BigNumberish | null
    ): MaxSellAmountUpdatedEventFilter;
    MaxSellAmountUpdated(
      amount?: BigNumberish | null
    ): MaxSellAmountUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetAutomatedMarketMakerPair(address,bool)"(
      pair?: string | null,
      value?: boolean | null
    ): SetAutomatedMarketMakerPairEventFilter;
    SetAutomatedMarketMakerPair(
      pair?: string | null,
      value?: boolean | null
    ): SetAutomatedMarketMakerPairEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Withdraw(address,uint256)"(
      sender?: null,
      value?: null
    ): WithdrawEventFilter;
    Withdraw(sender?: null, value?: null): WithdrawEventFilter;

    "WithdrawERC1155(address,uint256,uint256)"(
      tokenAddress?: null,
      id?: null,
      amount?: null
    ): WithdrawERC1155EventFilter;
    WithdrawERC1155(
      tokenAddress?: null,
      id?: null,
      amount?: null
    ): WithdrawERC1155EventFilter;

    "WithdrawERC20(address,address,uint256)"(
      sender?: null,
      token?: null,
      value?: null
    ): WithdrawERC20EventFilter;
    WithdrawERC20(
      sender?: null,
      token?: null,
      value?: null
    ): WithdrawERC20EventFilter;

    "WithdrawERC721(address,uint256[])"(
      tokenAddress?: null,
      tokenIds?: null
    ): WithdrawERC721EventFilter;
    WithdrawERC721(
      tokenAddress?: null,
      tokenIds?: null
    ): WithdrawERC721EventFilter;
  };

  estimateGas: {
    MAX_BUY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SELL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_ANTI_DUMP_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TAKE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    developmentAddress(overrides?: CallOverrides): Promise<BigNumber>;

    developmentBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    developmentSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    dexPair(overrides?: CallOverrides): Promise<BigNumber>;

    dexRouter(overrides?: CallOverrides): Promise<BigNumber>;

    excludeFromFees(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    includeInFees(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExcludedFromFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityAddress(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    liquiditySellFee(overrides?: CallOverrides): Promise<BigNumber>;

    marketingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    marketingBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    marketingSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxSellAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevelopmentAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevelopmentBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevelopmentSellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquiditySellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketingAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketingBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketingSellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSellAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalBuyFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSellFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC1155(
      tokenAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_BUY_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_SELL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_ANTI_DUMP_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_TAKE_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    developmentAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    developmentBuyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    developmentSellFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dexPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeFromFees(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    includeInFees(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityBuyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquiditySellFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingBuyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingSellFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSellAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevelopmentAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevelopmentBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevelopmentSellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquiditySellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketingAddress(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketingBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketingSellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSellAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBuyFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSellFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC1155(
      tokenAddress: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
