/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MafaCoinV2Interface extends utils.Interface {
  functions: {
    "DEAD_ADDRESS()": FunctionFragment;
    "TOTAL_SUPPLY()": FunctionFragment;
    "afterPreSale()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "automatedMarketMakerPairs(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blacklistAccount(address,bool)": FunctionFragment;
    "burnBuyFee()": FunctionFragment;
    "burnSellFee()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "dexPair()": FunctionFragment;
    "dexRouter()": FunctionFragment;
    "excludeFromFees(address,bool)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isBlacklisted(address)": FunctionFragment;
    "isExcludedFromFees(address)": FunctionFragment;
    "liquidityBuyFee()": FunctionFragment;
    "liquiditySellFee()": FunctionFragment;
    "lotteryBuyFee()": FunctionFragment;
    "lotterySellFee()": FunctionFragment;
    "lotteryWallet()": FunctionFragment;
    "lpRecipient()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAutomatedMarketMakerPair(address,bool)": FunctionFragment;
    "setBurnBuyFee(uint256)": FunctionFragment;
    "setBurnSellFee(uint256)": FunctionFragment;
    "setLiquidyBuyFee(uint256)": FunctionFragment;
    "setLiquidySellFee(uint256)": FunctionFragment;
    "setLotteryBuyFee(uint256)": FunctionFragment;
    "setLotterySellFee(uint256)": FunctionFragment;
    "setLotteryWallet(address)": FunctionFragment;
    "setLpRecipient(address)": FunctionFragment;
    "setTeamBuyFee(uint256)": FunctionFragment;
    "setTeamSellFee(uint256)": FunctionFragment;
    "setTeamWallet(address)": FunctionFragment;
    "startLiquidity(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "teamBuyFee()": FunctionFragment;
    "teamSellFee()": FunctionFragment;
    "teamWallet()": FunctionFragment;
    "totalBuyFee()": FunctionFragment;
    "totalSellFee()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingIsEnabled()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEAD_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "afterPreSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blacklistAccount",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBuyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnSellFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dexPair", values?: undefined): string;
  encodeFunctionData(functionFragment: "dexRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityBuyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquiditySellFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryBuyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotterySellFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnBuyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnSellFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidyBuyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidySellFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLotteryBuyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLotterySellFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLotteryWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLpRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeamBuyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeamSellFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeamWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "startLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "teamBuyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamSellFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBuyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSellFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingIsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEAD_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterPreSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnBuyFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquiditySellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotterySellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidyBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidySellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLotteryBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLotterySellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLotteryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLpRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTeamBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTeamSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTeamWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teamBuyFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "teamSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBuyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingIsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AccountBlacklisted(address,bool)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "BurnFeeStopped(uint256,uint256,uint256)": EventFragment;
    "ExcludeFromFees(address,bool)": EventFragment;
    "FeeUpdated(uint256,bytes32)": EventFragment;
    "LiquidityStarted(address,address)": EventFragment;
    "LotteryWalletUpdated(address)": EventFragment;
    "LpRecipientUpdated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAutomatedMarketMakerPair(address,bool)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "TeamWalletUpdated(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnFeeStopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LpRecipientUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetAutomatedMarketMakerPair"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeamWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type AccountBlacklistedEvent = TypedEvent<
  [string, boolean],
  { account: string; isBlacklisted: boolean }
>;

export type AccountBlacklistedEventFilter =
  TypedEventFilter<AccountBlacklistedEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type BurnFeeStoppedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { burnedTokens: BigNumber; burnBuyFee: BigNumber; burnSellFee: BigNumber }
>;

export type BurnFeeStoppedEventFilter = TypedEventFilter<BurnFeeStoppedEvent>;

export type ExcludeFromFeesEvent = TypedEvent<
  [string, boolean],
  { account: string; isExcluded: boolean }
>;

export type ExcludeFromFeesEventFilter = TypedEventFilter<ExcludeFromFeesEvent>;

export type FeeUpdatedEvent = TypedEvent<
  [BigNumber, string],
  { fee: BigNumber; feeType: string }
>;

export type FeeUpdatedEventFilter = TypedEventFilter<FeeUpdatedEvent>;

export type LiquidityStartedEvent = TypedEvent<
  [string, string],
  { routerAddress: string; pairAddress: string }
>;

export type LiquidityStartedEventFilter =
  TypedEventFilter<LiquidityStartedEvent>;

export type LotteryWalletUpdatedEvent = TypedEvent<
  [string],
  { newWallet: string }
>;

export type LotteryWalletUpdatedEventFilter =
  TypedEventFilter<LotteryWalletUpdatedEvent>;

export type LpRecipientUpdatedEvent = TypedEvent<
  [string],
  { lpRecipient: string }
>;

export type LpRecipientUpdatedEventFilter =
  TypedEventFilter<LpRecipientUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SetAutomatedMarketMakerPairEvent = TypedEvent<
  [string, boolean],
  { pair: string; value: boolean }
>;

export type SetAutomatedMarketMakerPairEventFilter =
  TypedEventFilter<SetAutomatedMarketMakerPairEvent>;

export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    tokensSwapped: BigNumber;
    bnbReceived: BigNumber;
    tokensIntoLiqudity: BigNumber;
  }
>;

export type SwapAndLiquifyEventFilter = TypedEventFilter<SwapAndLiquifyEvent>;

export type TeamWalletUpdatedEvent = TypedEvent<
  [string],
  { newWallet: string }
>;

export type TeamWalletUpdatedEventFilter =
  TypedEventFilter<TeamWalletUpdatedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface MafaCoinV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MafaCoinV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEAD_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    afterPreSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    blacklistAccount(
      account: string,
      blacklisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnBuyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnSellFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dexPair(overrides?: CallOverrides): Promise<[string]>;

    dexRouter(overrides?: CallOverrides): Promise<[string]>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isExcludedFromFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidityBuyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquiditySellFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    lotteryBuyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    lotterySellFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    lotteryWallet(overrides?: CallOverrides): Promise<[string]>;

    lpRecipient(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBurnBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBurnSellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidyBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidySellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLotteryBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLotterySellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLotteryWallet(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLpRecipient(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTeamBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTeamSellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTeamWallet(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startLiquidity(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    teamBuyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    teamSellFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    teamWallet(overrides?: CallOverrides): Promise<[string]>;

    totalBuyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSellFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingIsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEAD_ADDRESS(overrides?: CallOverrides): Promise<string>;

  TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  afterPreSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  automatedMarketMakerPairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  blacklistAccount(
    account: string,
    blacklisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

  burnSellFee(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dexPair(overrides?: CallOverrides): Promise<string>;

  dexRouter(overrides?: CallOverrides): Promise<string>;

  excludeFromFees(
    account: string,
    excluded: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isExcludedFromFees(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  liquidityBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

  liquiditySellFee(overrides?: CallOverrides): Promise<BigNumber>;

  lotteryBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

  lotterySellFee(overrides?: CallOverrides): Promise<BigNumber>;

  lotteryWallet(overrides?: CallOverrides): Promise<string>;

  lpRecipient(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAutomatedMarketMakerPair(
    pair: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBurnBuyFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBurnSellFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidyBuyFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidySellFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLotteryBuyFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLotterySellFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLotteryWallet(
    _newWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLpRecipient(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTeamBuyFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTeamSellFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTeamWallet(
    _newWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startLiquidity(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  teamBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

  teamSellFee(overrides?: CallOverrides): Promise<BigNumber>;

  teamWallet(overrides?: CallOverrides): Promise<string>;

  totalBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalSellFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradingIsEnabled(overrides?: CallOverrides): Promise<boolean>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEAD_ADDRESS(overrides?: CallOverrides): Promise<string>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    afterPreSale(overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistAccount(
      account: string,
      blacklisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    burnBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    burnSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dexPair(overrides?: CallOverrides): Promise<string>;

    dexRouter(overrides?: CallOverrides): Promise<string>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isExcludedFromFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidityBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    liquiditySellFee(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    lotterySellFee(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryWallet(overrides?: CallOverrides): Promise<string>;

    lpRecipient(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBurnBuyFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBurnSellFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidyBuyFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidySellFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLotteryBuyFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLotterySellFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLotteryWallet(
      _newWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLpRecipient(recipient: string, overrides?: CallOverrides): Promise<void>;

    setTeamBuyFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTeamSellFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTeamWallet(_newWallet: string, overrides?: CallOverrides): Promise<void>;

    startLiquidity(router: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    teamBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    teamSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    teamWallet(overrides?: CallOverrides): Promise<string>;

    totalBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingIsEnabled(overrides?: CallOverrides): Promise<boolean>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountBlacklisted(address,bool)"(
      account?: string | null,
      isBlacklisted?: null
    ): AccountBlacklistedEventFilter;
    AccountBlacklisted(
      account?: string | null,
      isBlacklisted?: null
    ): AccountBlacklistedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BurnFeeStopped(uint256,uint256,uint256)"(
      burnedTokens?: BigNumberish | null,
      burnBuyFee?: BigNumberish | null,
      burnSellFee?: BigNumberish | null
    ): BurnFeeStoppedEventFilter;
    BurnFeeStopped(
      burnedTokens?: BigNumberish | null,
      burnBuyFee?: BigNumberish | null,
      burnSellFee?: BigNumberish | null
    ): BurnFeeStoppedEventFilter;

    "ExcludeFromFees(address,bool)"(
      account?: string | null,
      isExcluded?: null
    ): ExcludeFromFeesEventFilter;
    ExcludeFromFees(
      account?: string | null,
      isExcluded?: null
    ): ExcludeFromFeesEventFilter;

    "FeeUpdated(uint256,bytes32)"(
      fee?: BigNumberish | null,
      feeType?: BytesLike | null
    ): FeeUpdatedEventFilter;
    FeeUpdated(
      fee?: BigNumberish | null,
      feeType?: BytesLike | null
    ): FeeUpdatedEventFilter;

    "LiquidityStarted(address,address)"(
      routerAddress?: string | null,
      pairAddress?: string | null
    ): LiquidityStartedEventFilter;
    LiquidityStarted(
      routerAddress?: string | null,
      pairAddress?: string | null
    ): LiquidityStartedEventFilter;

    "LotteryWalletUpdated(address)"(
      newWallet?: string | null
    ): LotteryWalletUpdatedEventFilter;
    LotteryWalletUpdated(
      newWallet?: string | null
    ): LotteryWalletUpdatedEventFilter;

    "LpRecipientUpdated(address)"(
      lpRecipient?: string | null
    ): LpRecipientUpdatedEventFilter;
    LpRecipientUpdated(
      lpRecipient?: string | null
    ): LpRecipientUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetAutomatedMarketMakerPair(address,bool)"(
      pair?: string | null,
      value?: boolean | null
    ): SetAutomatedMarketMakerPairEventFilter;
    SetAutomatedMarketMakerPair(
      pair?: string | null,
      value?: boolean | null
    ): SetAutomatedMarketMakerPairEventFilter;

    "SwapAndLiquify(uint256,uint256,uint256)"(
      tokensSwapped?: BigNumberish | null,
      bnbReceived?: BigNumberish | null,
      tokensIntoLiqudity?: BigNumberish | null
    ): SwapAndLiquifyEventFilter;
    SwapAndLiquify(
      tokensSwapped?: BigNumberish | null,
      bnbReceived?: BigNumberish | null,
      tokensIntoLiqudity?: BigNumberish | null
    ): SwapAndLiquifyEventFilter;

    "TeamWalletUpdated(address)"(
      newWallet?: string | null
    ): TeamWalletUpdatedEventFilter;
    TeamWalletUpdated(newWallet?: string | null): TeamWalletUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DEAD_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    afterPreSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistAccount(
      account: string,
      blacklisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    burnSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dexPair(overrides?: CallOverrides): Promise<BigNumber>;

    dexRouter(overrides?: CallOverrides): Promise<BigNumber>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isExcludedFromFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    liquiditySellFee(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    lotterySellFee(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryWallet(overrides?: CallOverrides): Promise<BigNumber>;

    lpRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBurnBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBurnSellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidyBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidySellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLotteryBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLotterySellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLotteryWallet(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLpRecipient(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTeamBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTeamSellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTeamWallet(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startLiquidity(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    teamBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    teamSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    teamWallet(overrides?: CallOverrides): Promise<BigNumber>;

    totalBuyFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingIsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEAD_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    afterPreSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistAccount(
      account: string,
      blacklisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnBuyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnSellFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dexPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isBlacklisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExcludedFromFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityBuyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquiditySellFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotteryBuyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotterySellFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotteryWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBurnBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBurnSellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidyBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidySellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLotteryBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLotterySellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLotteryWallet(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLpRecipient(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTeamBuyFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTeamSellFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTeamWallet(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startLiquidity(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamBuyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamSellFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBuyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSellFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingIsEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
