/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ItemStruct = {
  tokenContract: string;
  tokenId: BigNumberish;
  title: BytesLike;
  price: BigNumberish;
};

export type ItemStructOutput = [string, BigNumber, string, BigNumber] & {
  tokenContract: string;
  tokenId: BigNumber;
  title: string;
  price: BigNumber;
};

export interface MafaStoreInterface extends utils.Interface {
  functions: {
    "acceptedToken()": FunctionFragment;
    "addItemToBeSold(address,uint256,bytes32,uint256)": FunctionFragment;
    "avatarContract()": FunctionFragment;
    "avatarPrice()": FunctionFragment;
    "buyItem(uint256,bytes32,uint256)": FunctionFragment;
    "buyTicket(uint256,bytes32)": FunctionFragment;
    "dailySellPercentage()": FunctionFragment;
    "dailyVolumes(address,uint256)": FunctionFragment;
    "getItemPriceInMAFA(uint256,uint256)": FunctionFragment;
    "getMAFAtoBUSDprice()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "items(uint256)": FunctionFragment;
    "listItems()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeItemFromStore(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellAvatar(uint256[])": FunctionFragment;
    "setAcceptedToken(address)": FunctionFragment;
    "setAvatarAddress(address)": FunctionFragment;
    "setAvatarPrice(uint256)": FunctionFragment;
    "setBnbBusdPair(address)": FunctionFragment;
    "setDailySellPercentage(uint256)": FunctionFragment;
    "setMafaBnbPair(address)": FunctionFragment;
    "setTicketSeller(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "ticketSeller()": FunctionFragment;
    "tickets(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateItemPrice(uint256,uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawERC1155(address,address,uint256,uint256)": FunctionFragment;
    "withdrawERC20(address,address,uint256)": FunctionFragment;
    "withdrawERC721(address,address,uint256[])": FunctionFragment;
    "withdrawNFTs(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addItemToBeSold",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "avatarContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avatarPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyItem",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dailySellPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyVolumes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemPriceInMAFA",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMAFAtoBUSDprice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "items", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "listItems", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeItemFromStore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellAvatar",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAcceptedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvatarAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvatarPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBnbBusdPair",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDailySellPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMafaBnbPair",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTicketSeller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketSeller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateItemPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFTs",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addItemToBeSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avatarContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avatarPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dailySellPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyVolumes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemPriceInMAFA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMAFAtoBUSDprice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listItems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeItemFromStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAcceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAvatarAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAvatarPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBnbBusdPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDailySellPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMafaBnbPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTicketSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateItemPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFTs",
    data: BytesLike
  ): Result;

  events: {
    "AcceptedTokenChanged(address)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "AvatarAddressChanged(address)": EventFragment;
    "AvatarPriceChanged(uint256)": EventFragment;
    "AvatarSold(address,uint256[],uint256,uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BnbBusdPairChanged(address)": EventFragment;
    "DailySellPercentageChanged(uint256)": EventFragment;
    "ItemAdded(address,uint256,uint256,bytes32,uint256)": EventFragment;
    "ItemBought(address,uint256,uint256,address,address,uint256,uint256)": EventFragment;
    "ItemDeleted(uint256,address,uint256,uint256)": EventFragment;
    "ItemPriceUpdated(uint256,uint256)": EventFragment;
    "MafaBnbPairChanged(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "TicketBought(uint256,bytes32,address,uint256)": EventFragment;
    "TicketSellerUpdated(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptedTokenChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AvatarAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AvatarPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AvatarSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BnbBusdPairChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DailySellPercentageChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MafaBnbPairChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketSellerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AcceptedTokenChangedEvent = TypedEvent<[string], { addr: string }>;

export type AcceptedTokenChangedEventFilter =
  TypedEventFilter<AcceptedTokenChangedEvent>;

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AvatarAddressChangedEvent = TypedEvent<[string], { addr: string }>;

export type AvatarAddressChangedEventFilter =
  TypedEventFilter<AvatarAddressChangedEvent>;

export type AvatarPriceChangedEvent = TypedEvent<
  [BigNumber],
  { price: BigNumber }
>;

export type AvatarPriceChangedEventFilter =
  TypedEventFilter<AvatarPriceChangedEvent>;

export type AvatarSoldEvent = TypedEvent<
  [string, BigNumber[], BigNumber, BigNumber],
  { seller: string; tokenId: BigNumber[]; price: BigNumber; amounts: BigNumber }
>;

export type AvatarSoldEventFilter = TypedEventFilter<AvatarSoldEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type BnbBusdPairChangedEvent = TypedEvent<[string], { addr: string }>;

export type BnbBusdPairChangedEventFilter =
  TypedEventFilter<BnbBusdPairChangedEvent>;

export type DailySellPercentageChangedEvent = TypedEvent<
  [BigNumber],
  { percentage: BigNumber }
>;

export type DailySellPercentageChangedEventFilter =
  TypedEventFilter<DailySellPercentageChangedEvent>;

export type ItemAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber],
  {
    tokenContract: string;
    id: BigNumber;
    tokenId: BigNumber;
    title: string;
    price: BigNumber;
  }
>;

export type ItemAddedEventFilter = TypedEventFilter<ItemAddedEvent>;

export type ItemBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string, BigNumber, BigNumber],
  {
    tokenContract: string;
    id: BigNumber;
    tokenId: BigNumber;
    seller: string;
    buyer: string;
    price: BigNumber;
    amounts: BigNumber;
  }
>;

export type ItemBoughtEventFilter = TypedEventFilter<ItemBoughtEvent>;

export type ItemDeletedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    toDeleteIndex: BigNumber;
    tokenContract: string;
    itemId: BigNumber;
    price: BigNumber;
  }
>;

export type ItemDeletedEventFilter = TypedEventFilter<ItemDeletedEvent>;

export type ItemPriceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { id: BigNumber; price: BigNumber }
>;

export type ItemPriceUpdatedEventFilter =
  TypedEventFilter<ItemPriceUpdatedEvent>;

export type MafaBnbPairChangedEvent = TypedEvent<[string], { addr: string }>;

export type MafaBnbPairChangedEventFilter =
  TypedEventFilter<MafaBnbPairChangedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type TicketBoughtEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { id: BigNumber; title: string; buyer: string; price: BigNumber }
>;

export type TicketBoughtEventFilter = TypedEventFilter<TicketBoughtEvent>;

export type TicketSellerUpdatedEvent = TypedEvent<
  [string],
  { ticketSeller: string }
>;

export type TicketSellerUpdatedEventFilter =
  TypedEventFilter<TicketSellerUpdatedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface MafaStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MafaStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptedToken(overrides?: CallOverrides): Promise<[string]>;

    addItemToBeSold(
      tokenContract: string,
      tokenId: BigNumberish,
      title: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    avatarContract(overrides?: CallOverrides): Promise<[string]>;

    avatarPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyItem(
      id: BigNumberish,
      title: BytesLike,
      amounts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyTicket(
      id: BigNumberish,
      title: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dailySellPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    dailyVolumes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { date: BigNumber; amount: BigNumber }>;

    getItemPriceInMAFA(
      id: BigNumberish,
      amounts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getMAFAtoBUSDprice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    initialize(
      _acceptedToken: string,
      avatarAddress: string,
      mafaBnb: string,
      bnbBusd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        tokenContract: string;
        tokenId: BigNumber;
        title: string;
        price: BigNumber;
      }
    >;

    listItems(overrides?: CallOverrides): Promise<[ItemStructOutput[]]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeItemFromStore(
      toDeleteIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellAvatar(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAcceptedToken(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAvatarAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAvatarPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBnbBusdPair(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDailySellPercentage(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMafaBnbPair(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTicketSeller(
      newTicketSeller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ticketSeller(overrides?: CallOverrides): Promise<[string]>;

    tickets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber] & {
        quantity: number;
        title: string;
        price: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateItemPrice(
      id: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC1155(
      tokenAddress: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      tokenAddress: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      tokenAddress: string,
      to: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawNFTs(
      tokenAddress: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptedToken(overrides?: CallOverrides): Promise<string>;

  addItemToBeSold(
    tokenContract: string,
    tokenId: BigNumberish,
    title: BytesLike,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  avatarContract(overrides?: CallOverrides): Promise<string>;

  avatarPrice(overrides?: CallOverrides): Promise<BigNumber>;

  buyItem(
    id: BigNumberish,
    title: BytesLike,
    amounts: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyTicket(
    id: BigNumberish,
    title: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dailySellPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  dailyVolumes(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { date: BigNumber; amount: BigNumber }>;

  getItemPriceInMAFA(
    id: BigNumberish,
    amounts: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMAFAtoBUSDprice(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _acceptedToken: string,
    avatarAddress: string,
    mafaBnb: string,
    bnbBusd: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  items(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber] & {
      tokenContract: string;
      tokenId: BigNumber;
      title: string;
      price: BigNumber;
    }
  >;

  listItems(overrides?: CallOverrides): Promise<ItemStructOutput[]>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeItemFromStore(
    toDeleteIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellAvatar(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAcceptedToken(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAvatarAddress(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAvatarPrice(
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBnbBusdPair(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDailySellPercentage(
    percentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMafaBnbPair(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTicketSeller(
    newTicketSeller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ticketSeller(overrides?: CallOverrides): Promise<string>;

  tickets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber] & {
      quantity: number;
      title: string;
      price: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateItemPrice(
    id: BigNumberish,
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  withdraw(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC1155(
    tokenAddress: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    tokenAddress: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    tokenAddress: string,
    to: string,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawNFTs(
    tokenAddress: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptedToken(overrides?: CallOverrides): Promise<string>;

    addItemToBeSold(
      tokenContract: string,
      tokenId: BigNumberish,
      title: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    avatarContract(overrides?: CallOverrides): Promise<string>;

    avatarPrice(overrides?: CallOverrides): Promise<BigNumber>;

    buyItem(
      id: BigNumberish,
      title: BytesLike,
      amounts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTicket(
      id: BigNumberish,
      title: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    dailySellPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    dailyVolumes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { date: BigNumber; amount: BigNumber }>;

    getItemPriceInMAFA(
      id: BigNumberish,
      amounts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMAFAtoBUSDprice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _acceptedToken: string,
      avatarAddress: string,
      mafaBnb: string,
      bnbBusd: string,
      overrides?: CallOverrides
    ): Promise<void>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        tokenContract: string;
        tokenId: BigNumber;
        title: string;
        price: BigNumber;
      }
    >;

    listItems(overrides?: CallOverrides): Promise<ItemStructOutput[]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeItemFromStore(
      toDeleteIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellAvatar(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAcceptedToken(addr: string, overrides?: CallOverrides): Promise<void>;

    setAvatarAddress(addr: string, overrides?: CallOverrides): Promise<void>;

    setAvatarPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBnbBusdPair(addr: string, overrides?: CallOverrides): Promise<void>;

    setDailySellPercentage(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMafaBnbPair(addr: string, overrides?: CallOverrides): Promise<void>;

    setTicketSeller(
      newTicketSeller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ticketSeller(overrides?: CallOverrides): Promise<string>;

    tickets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber] & {
        quantity: number;
        title: string;
        price: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateItemPrice(
      id: BigNumberish,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC1155(
      tokenAddress: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      tokenAddress: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      tokenAddress: string,
      to: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNFTs(
      tokenAddress: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AcceptedTokenChanged(address)"(
      addr?: string | null
    ): AcceptedTokenChangedEventFilter;
    AcceptedTokenChanged(addr?: string | null): AcceptedTokenChangedEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AvatarAddressChanged(address)"(
      addr?: string | null
    ): AvatarAddressChangedEventFilter;
    AvatarAddressChanged(addr?: string | null): AvatarAddressChangedEventFilter;

    "AvatarPriceChanged(uint256)"(
      price?: BigNumberish | null
    ): AvatarPriceChangedEventFilter;
    AvatarPriceChanged(
      price?: BigNumberish | null
    ): AvatarPriceChangedEventFilter;

    "AvatarSold(address,uint256[],uint256,uint256)"(
      seller?: string | null,
      tokenId?: BigNumberish[] | null,
      price?: BigNumberish | null,
      amounts?: null
    ): AvatarSoldEventFilter;
    AvatarSold(
      seller?: string | null,
      tokenId?: BigNumberish[] | null,
      price?: BigNumberish | null,
      amounts?: null
    ): AvatarSoldEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "BnbBusdPairChanged(address)"(
      addr?: string | null
    ): BnbBusdPairChangedEventFilter;
    BnbBusdPairChanged(addr?: string | null): BnbBusdPairChangedEventFilter;

    "DailySellPercentageChanged(uint256)"(
      percentage?: BigNumberish | null
    ): DailySellPercentageChangedEventFilter;
    DailySellPercentageChanged(
      percentage?: BigNumberish | null
    ): DailySellPercentageChangedEventFilter;

    "ItemAdded(address,uint256,uint256,bytes32,uint256)"(
      tokenContract?: string | null,
      id?: null,
      tokenId?: null,
      title?: null,
      price?: null
    ): ItemAddedEventFilter;
    ItemAdded(
      tokenContract?: string | null,
      id?: null,
      tokenId?: null,
      title?: null,
      price?: null
    ): ItemAddedEventFilter;

    "ItemBought(address,uint256,uint256,address,address,uint256,uint256)"(
      tokenContract?: string | null,
      id?: null,
      tokenId?: null,
      seller?: string | null,
      buyer?: string | null,
      price?: null,
      amounts?: null
    ): ItemBoughtEventFilter;
    ItemBought(
      tokenContract?: string | null,
      id?: null,
      tokenId?: null,
      seller?: string | null,
      buyer?: string | null,
      price?: null,
      amounts?: null
    ): ItemBoughtEventFilter;

    "ItemDeleted(uint256,address,uint256,uint256)"(
      toDeleteIndex?: null,
      tokenContract?: string | null,
      itemId?: null,
      price?: null
    ): ItemDeletedEventFilter;
    ItemDeleted(
      toDeleteIndex?: null,
      tokenContract?: string | null,
      itemId?: null,
      price?: null
    ): ItemDeletedEventFilter;

    "ItemPriceUpdated(uint256,uint256)"(
      id?: null,
      price?: null
    ): ItemPriceUpdatedEventFilter;
    ItemPriceUpdated(id?: null, price?: null): ItemPriceUpdatedEventFilter;

    "MafaBnbPairChanged(address)"(
      addr?: string | null
    ): MafaBnbPairChangedEventFilter;
    MafaBnbPairChanged(addr?: string | null): MafaBnbPairChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "TicketBought(uint256,bytes32,address,uint256)"(
      id?: null,
      title?: BytesLike | null,
      buyer?: string | null,
      price?: BigNumberish | null
    ): TicketBoughtEventFilter;
    TicketBought(
      id?: null,
      title?: BytesLike | null,
      buyer?: string | null,
      price?: BigNumberish | null
    ): TicketBoughtEventFilter;

    "TicketSellerUpdated(address)"(
      ticketSeller?: string | null
    ): TicketSellerUpdatedEventFilter;
    TicketSellerUpdated(
      ticketSeller?: string | null
    ): TicketSellerUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    acceptedToken(overrides?: CallOverrides): Promise<BigNumber>;

    addItemToBeSold(
      tokenContract: string,
      tokenId: BigNumberish,
      title: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    avatarContract(overrides?: CallOverrides): Promise<BigNumber>;

    avatarPrice(overrides?: CallOverrides): Promise<BigNumber>;

    buyItem(
      id: BigNumberish,
      title: BytesLike,
      amounts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyTicket(
      id: BigNumberish,
      title: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dailySellPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    dailyVolumes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getItemPriceInMAFA(
      id: BigNumberish,
      amounts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMAFAtoBUSDprice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _acceptedToken: string,
      avatarAddress: string,
      mafaBnb: string,
      bnbBusd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    items(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    listItems(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeItemFromStore(
      toDeleteIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellAvatar(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAcceptedToken(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAvatarAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAvatarPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBnbBusdPair(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDailySellPercentage(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMafaBnbPair(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTicketSeller(
      newTicketSeller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketSeller(overrides?: CallOverrides): Promise<BigNumber>;

    tickets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateItemPrice(
      id: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC1155(
      tokenAddress: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      tokenAddress: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      tokenAddress: string,
      to: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawNFTs(
      tokenAddress: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addItemToBeSold(
      tokenContract: string,
      tokenId: BigNumberish,
      title: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    avatarContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avatarPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyItem(
      id: BigNumberish,
      title: BytesLike,
      amounts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyTicket(
      id: BigNumberish,
      title: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dailySellPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyVolumes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemPriceInMAFA(
      id: BigNumberish,
      amounts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMAFAtoBUSDprice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _acceptedToken: string,
      avatarAddress: string,
      mafaBnb: string,
      bnbBusd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeItemFromStore(
      toDeleteIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellAvatar(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAcceptedToken(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAvatarAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAvatarPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBnbBusdPair(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDailySellPercentage(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMafaBnbPair(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTicketSeller(
      newTicketSeller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketSeller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateItemPrice(
      id: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC1155(
      tokenAddress: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      tokenAddress: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      tokenAddress: string,
      to: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNFTs(
      tokenAddress: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
