/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RoyaltiesV2UpgradeableImpl,
  RoyaltiesV2UpgradeableImplInterface,
} from "../RoyaltiesV2UpgradeableImpl";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address payable",
            name: "account",
            type: "address",
          },
          {
            internalType: "uint96",
            name: "value",
            type: "uint96",
          },
        ],
        indexed: false,
        internalType: "struct LibPart.Part[]",
        name: "royalties",
        type: "tuple[]",
      },
    ],
    name: "RoyaltiesSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getRaribleV2Royalties",
    outputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "account",
            type: "address",
          },
          {
            internalType: "uint96",
            name: "value",
            type: "uint96",
          },
        ],
        internalType: "struct LibPart.Part[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061022d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b578063cad96cca14610063575b600080fd5b61004e610049366004610163565b610083565b60405190151581526020015b60405180910390f35b610076610071366004610194565b6100ba565b60405161005a91906101ad565b60006001600160e01b0319821663656cb66560e11b14806100b457506301ffc9a760e01b6001600160e01b03198316145b92915050565b600081815260208181526040808320805482518185028101850190935280835260609492939192909184015b82821015610158576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16818301528252600190920191016100e6565b505050509050919050565b60006020828403121561017557600080fd5b81356001600160e01b03198116811461018d57600080fd5b9392505050565b6000602082840312156101a657600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b82811015610213578151805173ffffffffffffffffffffffffffffffffffffffff1685528601516bffffffffffffffffffffffff168685015292840192908501906001016101ca565b509197965050505050505056fea164736f6c6343000809000a";

type RoyaltiesV2UpgradeableImplConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RoyaltiesV2UpgradeableImplConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RoyaltiesV2UpgradeableImpl__factory extends ContractFactory {
  constructor(...args: RoyaltiesV2UpgradeableImplConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RoyaltiesV2UpgradeableImpl> {
    return super.deploy(overrides || {}) as Promise<RoyaltiesV2UpgradeableImpl>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RoyaltiesV2UpgradeableImpl {
    return super.attach(address) as RoyaltiesV2UpgradeableImpl;
  }
  connect(signer: Signer): RoyaltiesV2UpgradeableImpl__factory {
    return super.connect(signer) as RoyaltiesV2UpgradeableImpl__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoyaltiesV2UpgradeableImplInterface {
    return new utils.Interface(_abi) as RoyaltiesV2UpgradeableImplInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RoyaltiesV2UpgradeableImpl {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RoyaltiesV2UpgradeableImpl;
  }
}
